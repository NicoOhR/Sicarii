<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2054" onload="init(evt)" viewBox="0 0 1200 2054" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2054" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="2037.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="2037.00"> </text><svg id="frames" x="10" width="1180" total_samples="6718770533"><g><title>core::ptr::drop_in_place&lt;kuchikiki::tree::NodeRef&gt; (4,511,731 samples, 0.07%)</title><rect x="0.0067%" y="1685" width="0.0672%" height="15" fill="rgb(227,0,7)" fg:x="453149" fg:w="4511731"/><text x="0.2567%" y="1695.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;kuchikiki::tree::Node&gt;&gt; (4,511,731 samples, 0.07%)</title><rect x="0.0067%" y="1669" width="0.0672%" height="15" fill="rgb(217,0,24)" fg:x="453149" fg:w="4511731"/><text x="0.2567%" y="1679.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,511,731 samples, 0.07%)</title><rect x="0.0067%" y="1653" width="0.0672%" height="15" fill="rgb(221,193,54)" fg:x="453149" fg:w="4511731"/><text x="0.2567%" y="1663.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (4,511,731 samples, 0.07%)</title><rect x="0.0067%" y="1637" width="0.0672%" height="15" fill="rgb(248,212,6)" fg:x="453149" fg:w="4511731"/><text x="0.2567%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;kuchikiki::tree::Node&gt; (4,511,731 samples, 0.07%)</title><rect x="0.0067%" y="1621" width="0.0672%" height="15" fill="rgb(208,68,35)" fg:x="453149" fg:w="4511731"/><text x="0.2567%" y="1631.50"></text></g><g><title>&lt;kuchikiki::tree::Node as core::ops::drop::Drop&gt;::drop (4,511,731 samples, 0.07%)</title><rect x="0.0067%" y="1605" width="0.0672%" height="15" fill="rgb(232,128,0)" fg:x="453149" fg:w="4511731"/><text x="0.2567%" y="1615.50"></text></g><g><title>&lt;kuchikiki::tree::Node as core::ops::drop::Drop&gt;::drop::non_recursive_drop_unique_rc (4,511,731 samples, 0.07%)</title><rect x="0.0067%" y="1589" width="0.0672%" height="15" fill="rgb(207,160,47)" fg:x="453149" fg:w="4511731"/><text x="0.2567%" y="1599.50"></text></g><g><title>&lt;core::cell::Cell&lt;core::option::Option&lt;alloc::rc::Rc&lt;T&gt;&gt;&gt; as kuchikiki::cell_extras::CellOptionRc&lt;T&gt;&gt;::take_if_unique_strong (4,511,731 samples, 0.07%)</title><rect x="0.0067%" y="1573" width="0.0672%" height="15" fill="rgb(228,23,34)" fg:x="453149" fg:w="4511731"/><text x="0.2567%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;syntect::parsing::syntax_set::SyntaxSet&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1685" width="0.0660%" height="15" fill="rgb(218,30,26)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1695.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;syntect::parsing::syntax_set::SyntaxReference&gt;&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1669" width="0.0660%" height="15" fill="rgb(220,122,19)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1679.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1653" width="0.0660%" height="15" fill="rgb(250,228,42)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;[syntect::parsing::syntax_set::SyntaxReference]&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1637" width="0.0660%" height="15" fill="rgb(240,193,28)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;syntect::parsing::syntax_set::SyntaxReference&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1621" width="0.0660%" height="15" fill="rgb(216,20,37)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::string::String&gt;&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1605" width="0.0660%" height="15" fill="rgb(206,188,39)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::string::String,std::hash::random::RandomState&gt;&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1589" width="0.0660%" height="15" fill="rgb(217,207,13)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::string::String)&gt;&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1573" width="0.0660%" height="15" fill="rgb(231,73,38)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1583.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1557" width="0.0660%" height="15" fill="rgb(225,20,46)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1567.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1541" width="0.0660%" height="15" fill="rgb(210,31,41)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1525" width="0.0660%" height="15" fill="rgb(221,200,47)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1535.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1509" width="0.0660%" height="15" fill="rgb(226,26,5)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1519.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1493" width="0.0660%" height="15" fill="rgb(249,33,26)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::string::String)&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1477" width="0.0660%" height="15" fill="rgb(235,183,28)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1461" width="0.0660%" height="15" fill="rgb(221,5,38)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1445" width="0.0660%" height="15" fill="rgb(247,18,42)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1429" width="0.0660%" height="15" fill="rgb(241,131,45)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1439.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1413" width="0.0660%" height="15" fill="rgb(249,31,29)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1397" width="0.0660%" height="15" fill="rgb(225,111,53)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1381" width="0.0660%" height="15" fill="rgb(238,160,17)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1391.50"></text></g><g><title>alloc::alloc::dealloc (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1365" width="0.0660%" height="15" fill="rgb(214,148,48)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1375.50"></text></g><g><title>[libc.so.6] (4,432,907 samples, 0.07%)</title><rect x="0.0739%" y="1349" width="0.0660%" height="15" fill="rgb(232,36,49)" fg:x="4964880" fg:w="4432907"/><text x="0.3239%" y="1359.50"></text></g><g><title>html5ever::serialize::HtmlSerializer&lt;Wr&gt;::write_escaped (2,803,217 samples, 0.04%)</title><rect x="0.1399%" y="1557" width="0.0417%" height="15" fill="rgb(209,103,24)" fg:x="9397787" fg:w="2803217"/><text x="0.3899%" y="1567.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_fmt (2,803,217 samples, 0.04%)</title><rect x="0.1399%" y="1541" width="0.0417%" height="15" fill="rgb(229,88,8)" fg:x="9397787" fg:w="2803217"/><text x="0.3899%" y="1551.50"></text></g><g><title>std::io::Write::write_fmt (2,803,217 samples, 0.04%)</title><rect x="0.1399%" y="1525" width="0.0417%" height="15" fill="rgb(213,181,19)" fg:x="9397787" fg:w="2803217"/><text x="0.3899%" y="1535.50"></text></g><g><title>std::io::default_write_fmt (2,803,217 samples, 0.04%)</title><rect x="0.1399%" y="1509" width="0.0417%" height="15" fill="rgb(254,191,54)" fg:x="9397787" fg:w="2803217"/><text x="0.3899%" y="1519.50"></text></g><g><title>core::fmt::write (2,803,217 samples, 0.04%)</title><rect x="0.1399%" y="1493" width="0.0417%" height="15" fill="rgb(241,83,37)" fg:x="9397787" fg:w="2803217"/><text x="0.3899%" y="1503.50"></text></g><g><title>kuchikiki::serializer::&lt;impl alloc::string::ToString for kuchikiki::tree::NodeRef&gt;::to_string (7,113,525 samples, 0.11%)</title><rect x="0.1399%" y="1685" width="0.1059%" height="15" fill="rgb(233,36,39)" fg:x="9397787" fg:w="7113525"/><text x="0.3899%" y="1695.50"></text></g><g><title>kuchikiki::serializer::&lt;impl kuchikiki::tree::NodeRef&gt;::serialize (7,113,525 samples, 0.11%)</title><rect x="0.1399%" y="1669" width="0.1059%" height="15" fill="rgb(226,3,54)" fg:x="9397787" fg:w="7113525"/><text x="0.3899%" y="1679.50"></text></g><g><title>html5ever::serialize::serialize (7,113,525 samples, 0.11%)</title><rect x="0.1399%" y="1653" width="0.1059%" height="15" fill="rgb(245,192,40)" fg:x="9397787" fg:w="7113525"/><text x="0.3899%" y="1663.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (7,113,525 samples, 0.11%)</title><rect x="0.1399%" y="1637" width="0.1059%" height="15" fill="rgb(238,167,29)" fg:x="9397787" fg:w="7113525"/><text x="0.3899%" y="1647.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (7,113,525 samples, 0.11%)</title><rect x="0.1399%" y="1621" width="0.1059%" height="15" fill="rgb(232,182,51)" fg:x="9397787" fg:w="7113525"/><text x="0.3899%" y="1631.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (7,113,525 samples, 0.11%)</title><rect x="0.1399%" y="1605" width="0.1059%" height="15" fill="rgb(231,60,39)" fg:x="9397787" fg:w="7113525"/><text x="0.3899%" y="1615.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (7,113,525 samples, 0.11%)</title><rect x="0.1399%" y="1589" width="0.1059%" height="15" fill="rgb(208,69,12)" fg:x="9397787" fg:w="7113525"/><text x="0.3899%" y="1599.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (7,113,525 samples, 0.11%)</title><rect x="0.1399%" y="1573" width="0.1059%" height="15" fill="rgb(235,93,37)" fg:x="9397787" fg:w="7113525"/><text x="0.3899%" y="1583.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (4,310,308 samples, 0.06%)</title><rect x="0.1816%" y="1557" width="0.0642%" height="15" fill="rgb(213,116,39)" fg:x="12201004" fg:w="4310308"/><text x="0.4316%" y="1567.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (4,310,308 samples, 0.06%)</title><rect x="0.1816%" y="1541" width="0.0642%" height="15" fill="rgb(222,207,29)" fg:x="12201004" fg:w="4310308"/><text x="0.4316%" y="1551.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (4,310,308 samples, 0.06%)</title><rect x="0.1816%" y="1525" width="0.0642%" height="15" fill="rgb(206,96,30)" fg:x="12201004" fg:w="4310308"/><text x="0.4316%" y="1535.50"></text></g><g><title>kuchikiki::serializer::&lt;impl markup5ever::serialize::Serialize for kuchikiki::tree::NodeRef&gt;::serialize (4,310,308 samples, 0.06%)</title><rect x="0.1816%" y="1509" width="0.0642%" height="15" fill="rgb(218,138,4)" fg:x="12201004" fg:w="4310308"/><text x="0.4316%" y="1519.50"></text></g><g><title>kuchikiki::iter::&lt;impl kuchikiki::tree::NodeRef&gt;::children (4,310,308 samples, 0.06%)</title><rect x="0.1816%" y="1493" width="0.0642%" height="15" fill="rgb(250,191,14)" fg:x="12201004" fg:w="4310308"/><text x="0.4316%" y="1503.50"></text></g><g><title>kuchikiki::tree::Node::first_child (4,310,308 samples, 0.06%)</title><rect x="0.1816%" y="1477" width="0.0642%" height="15" fill="rgb(239,60,40)" fg:x="12201004" fg:w="4310308"/><text x="0.4316%" y="1487.50"></text></g><g><title>&lt;core::cell::Cell&lt;core::option::Option&lt;alloc::rc::Rc&lt;T&gt;&gt;&gt; as kuchikiki::cell_extras::CellOptionRc&lt;T&gt;&gt;::clone_inner (4,310,308 samples, 0.06%)</title><rect x="0.1816%" y="1461" width="0.0642%" height="15" fill="rgb(206,27,48)" fg:x="12201004" fg:w="4310308"/><text x="0.4316%" y="1471.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (4,310,308 samples, 0.06%)</title><rect x="0.1816%" y="1445" width="0.0642%" height="15" fill="rgb(225,35,8)" fg:x="12201004" fg:w="4310308"/><text x="0.4316%" y="1455.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9,944,366 samples, 0.15%)</title><rect x="0.2525%" y="1141" width="0.1480%" height="15" fill="rgb(250,213,24)" fg:x="16964461" fg:w="9944366"/><text x="0.5025%" y="1151.50"></text></g><g><title>core::ptr::write (5,915,911 samples, 0.09%)</title><rect x="0.3125%" y="1125" width="0.0881%" height="15" fill="rgb(247,123,22)" fg:x="20992916" fg:w="5915911"/><text x="0.5625%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1141" width="0.0722%" height="15" fill="rgb(231,138,38)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1125" width="0.0722%" height="15" fill="rgb(231,145,46)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1109" width="0.0722%" height="15" fill="rgb(251,118,11)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1093" width="0.0722%" height="15" fill="rgb(217,147,25)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1077" width="0.0722%" height="15" fill="rgb(247,81,37)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1061" width="0.0722%" height="15" fill="rgb(209,12,38)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1045" width="0.0722%" height="15" fill="rgb(227,1,9)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1029" width="0.0722%" height="15" fill="rgb(248,47,43)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1039.50"></text></g><g><title>[libc.so.6] (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="1013" width="0.0722%" height="15" fill="rgb(221,10,30)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1023.50"></text></g><g><title>[libc.so.6] (4,850,722 samples, 0.07%)</title><rect x="0.4005%" y="997" width="0.0722%" height="15" fill="rgb(210,229,1)" fg:x="26908827" fg:w="4850722"/><text x="0.6505%" y="1007.50"></text></g><g><title>syntect::dumps::&lt;impl syntect::parsing::syntax_set::SyntaxSet&gt;::load_defaults_newlines (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1685" width="0.4580%" height="15" fill="rgb(222,148,37)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1695.50"></text></g><g><title>syntect::dumps::from_uncompressed_data (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1669" width="0.4580%" height="15" fill="rgb(234,67,33)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1679.50"></text></g><g><title>syntect::dumps::deserialize_from_reader_impl (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1653" width="0.4580%" height="15" fill="rgb(247,98,35)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1663.50"></text></g><g><title>bincode::deserialize_from (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1637" width="0.4580%" height="15" fill="rgb(247,138,52)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1647.50"></text></g><g><title>bincode::config::Options::deserialize_from (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1621" width="0.4580%" height="15" fill="rgb(213,79,30)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1631.50"></text></g><g><title>bincode::internal::deserialize_from (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1605" width="0.4580%" height="15" fill="rgb(246,177,23)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1615.50"></text></g><g><title>bincode::internal::deserialize_from_seed (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1589" width="0.4580%" height="15" fill="rgb(230,62,27)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1599.50"></text></g><g><title>bincode::internal::deserialize_from_custom_seed (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1573" width="0.4580%" height="15" fill="rgb(216,154,8)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1583.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1557" width="0.4580%" height="15" fill="rgb(244,35,45)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1567.50"></text></g><g><title>syntect::parsing::syntax_set::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_set::SyntaxSet&gt;::deserialize (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1541" width="0.4580%" height="15" fill="rgb(251,115,12)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1551.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1525" width="0.4580%" height="15" fill="rgb(240,54,50)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1535.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1509" width="0.4580%" height="15" fill="rgb(233,84,52)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1519.50"></text></g><g><title>&lt;syntect::parsing::syntax_set::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_set::SyntaxSet&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1493" width="0.4580%" height="15" fill="rgb(207,117,47)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1503.50"></text></g><g><title>serde::de::SeqAccess::next_element (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1477" width="0.4580%" height="15" fill="rgb(249,43,39)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1487.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1461" width="0.4580%" height="15" fill="rgb(209,38,44)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1471.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1445" width="0.4580%" height="15" fill="rgb(236,212,23)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1455.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1429" width="0.4580%" height="15" fill="rgb(242,79,21)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1439.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1413" width="0.4580%" height="15" fill="rgb(211,96,35)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1423.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1397" width="0.4580%" height="15" fill="rgb(253,215,40)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1407.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1381" width="0.4580%" height="15" fill="rgb(211,81,21)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1391.50"></text></g><g><title>serde::de::SeqAccess::next_element (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1365" width="0.4580%" height="15" fill="rgb(208,190,38)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1375.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1349" width="0.4580%" height="15" fill="rgb(235,213,38)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1359.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1333" width="0.4580%" height="15" fill="rgb(237,122,38)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1343.50"></text></g><g><title>syntect::parsing::syntax_set::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_set::SyntaxReference&gt;::deserialize (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1317" width="0.4580%" height="15" fill="rgb(244,218,35)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1327.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1301" width="0.4580%" height="15" fill="rgb(240,68,47)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1311.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1285" width="0.4580%" height="15" fill="rgb(210,16,53)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1295.50"></text></g><g><title>&lt;syntect::parsing::syntax_set::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_set::SyntaxReference&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1269" width="0.4580%" height="15" fill="rgb(235,124,12)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1279.50"></text></g><g><title>serde::de::SeqAccess::next_element (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1253" width="0.4580%" height="15" fill="rgb(224,169,11)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1263.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1237" width="0.4580%" height="15" fill="rgb(250,166,2)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1247.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1221" width="0.4580%" height="15" fill="rgb(242,216,29)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1231.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1205" width="0.4580%" height="15" fill="rgb(230,116,27)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1215.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1189" width="0.4580%" height="15" fill="rgb(228,99,48)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1199.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1173" width="0.4580%" height="15" fill="rgb(253,11,6)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1183.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (30,771,566 samples, 0.46%)</title><rect x="0.2525%" y="1157" width="0.4580%" height="15" fill="rgb(247,143,39)" fg:x="16964461" fg:w="30771566"/><text x="0.5025%" y="1167.50"></text></g><g><title>serde::de::SeqAccess::next_element (15,976,478 samples, 0.24%)</title><rect x="0.4727%" y="1141" width="0.2378%" height="15" fill="rgb(236,97,10)" fg:x="31759549" fg:w="15976478"/><text x="0.7227%" y="1151.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (15,976,478 samples, 0.24%)</title><rect x="0.4727%" y="1125" width="0.2378%" height="15" fill="rgb(233,208,19)" fg:x="31759549" fg:w="15976478"/><text x="0.7227%" y="1135.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,132,883 samples, 0.09%)</title><rect x="0.6192%" y="1109" width="0.0913%" height="15" fill="rgb(216,164,2)" fg:x="41603144" fg:w="6132883"/><text x="0.8692%" y="1119.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (6,132,883 samples, 0.09%)</title><rect x="0.6192%" y="1093" width="0.0913%" height="15" fill="rgb(220,129,5)" fg:x="41603144" fg:w="6132883"/><text x="0.8692%" y="1103.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (6,132,883 samples, 0.09%)</title><rect x="0.6192%" y="1077" width="0.0913%" height="15" fill="rgb(242,17,10)" fg:x="41603144" fg:w="6132883"/><text x="0.8692%" y="1087.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (6,132,883 samples, 0.09%)</title><rect x="0.6192%" y="1061" width="0.0913%" height="15" fill="rgb(242,107,0)" fg:x="41603144" fg:w="6132883"/><text x="0.8692%" y="1071.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (6,132,883 samples, 0.09%)</title><rect x="0.6192%" y="1045" width="0.0913%" height="15" fill="rgb(251,28,31)" fg:x="41603144" fg:w="6132883"/><text x="0.8692%" y="1055.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (6,132,883 samples, 0.09%)</title><rect x="0.6192%" y="1029" width="0.0913%" height="15" fill="rgb(233,223,10)" fg:x="41603144" fg:w="6132883"/><text x="0.8692%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (6,132,883 samples, 0.09%)</title><rect x="0.6192%" y="1013" width="0.0913%" height="15" fill="rgb(215,21,27)" fg:x="41603144" fg:w="6132883"/><text x="0.8692%" y="1023.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (846,974 samples, 0.01%)</title><rect x="0.6979%" y="997" width="0.0126%" height="15" fill="rgb(232,23,21)" fg:x="46889053" fg:w="846974"/><text x="0.9479%" y="1007.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (846,974 samples, 0.01%)</title><rect x="0.6979%" y="981" width="0.0126%" height="15" fill="rgb(244,5,23)" fg:x="46889053" fg:w="846974"/><text x="0.9479%" y="991.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (846,974 samples, 0.01%)</title><rect x="0.6979%" y="965" width="0.0126%" height="15" fill="rgb(226,81,46)" fg:x="46889053" fg:w="846974"/><text x="0.9479%" y="975.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::MapAccess&gt;::next_key_seed (2,392,323 samples, 0.04%)</title><rect x="0.7105%" y="1269" width="0.0356%" height="15" fill="rgb(247,70,30)" fg:x="47736027" fg:w="2392323"/><text x="0.9605%" y="1279.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (2,392,323 samples, 0.04%)</title><rect x="0.7105%" y="1253" width="0.0356%" height="15" fill="rgb(212,68,19)" fg:x="47736027" fg:w="2392323"/><text x="0.9605%" y="1263.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2,392,323 samples, 0.04%)</title><rect x="0.7105%" y="1237" width="0.0356%" height="15" fill="rgb(240,187,13)" fg:x="47736027" fg:w="2392323"/><text x="0.9605%" y="1247.50"></text></g><g><title>serde::de::MapAccess::next_entry (5,972,788 samples, 0.09%)</title><rect x="0.7105%" y="1301" width="0.0889%" height="15" fill="rgb(223,113,26)" fg:x="47736027" fg:w="5972788"/><text x="0.9605%" y="1311.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (5,972,788 samples, 0.09%)</title><rect x="0.7105%" y="1285" width="0.0889%" height="15" fill="rgb(206,192,2)" fg:x="47736027" fg:w="5972788"/><text x="0.9605%" y="1295.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::MapAccess&gt;::next_value_seed (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1269" width="0.0533%" height="15" fill="rgb(241,108,4)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1279.50"></text></g><g><title>plist::de::Deserializer&lt;I&gt;::with_option_mode (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1253" width="0.0533%" height="15" fill="rgb(247,173,49)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1263.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::MapAccess&gt;::next_value_seed::{{closure}} (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1237" width="0.0533%" height="15" fill="rgb(224,114,35)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1247.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1221" width="0.0533%" height="15" fill="rgb(245,159,27)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1231.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1205" width="0.0533%" height="15" fill="rgb(245,172,44)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1215.50"></text></g><g><title>&lt;&amp;mut plist::de::Deserializer&lt;I&gt; as serde::de::Deserializer&gt;::deserialize_any (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1189" width="0.0533%" height="15" fill="rgb(236,23,11)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1199.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1173" width="0.0533%" height="15" fill="rgb(205,117,38)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1183.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1157" width="0.0533%" height="15" fill="rgb(237,72,25)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1167.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1141" width="0.0533%" height="15" fill="rgb(244,70,9)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1151.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1125" width="0.0533%" height="15" fill="rgb(217,125,39)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1135.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1109" width="0.0533%" height="15" fill="rgb(235,36,10)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1119.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1093" width="0.0533%" height="15" fill="rgb(251,123,47)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1103.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1077" width="0.0533%" height="15" fill="rgb(221,13,13)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1087.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1061" width="0.0533%" height="15" fill="rgb(238,131,9)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1071.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1045" width="0.0533%" height="15" fill="rgb(211,50,8)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1029" width="0.0533%" height="15" fill="rgb(245,182,24)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1039.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="1013" width="0.0533%" height="15" fill="rgb(242,14,37)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1023.50"></text></g><g><title>alloc::alloc::alloc (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="997" width="0.0533%" height="15" fill="rgb(246,228,12)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="1007.50"></text></g><g><title>[libc.so.6] (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="981" width="0.0533%" height="15" fill="rgb(213,55,15)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="991.50"></text></g><g><title>[libc.so.6] (3,580,465 samples, 0.05%)</title><rect x="0.7461%" y="965" width="0.0533%" height="15" fill="rgb(209,9,3)" fg:x="50128350" fg:w="3580465"/><text x="0.9961%" y="975.50"></text></g><g><title>syntect::highlighting::settings::read_plist (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1653" width="0.1315%" height="15" fill="rgb(230,59,30)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1663.50"></text></g><g><title>plist::de::from_reader (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1637" width="0.1315%" height="15" fill="rgb(209,121,21)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1647.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1621" width="0.1315%" height="15" fill="rgb(220,109,13)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1631.50"></text></g><g><title>&lt;&amp;mut plist::de::Deserializer&lt;I&gt; as serde::de::Deserializer&gt;::deserialize_any (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1605" width="0.1315%" height="15" fill="rgb(232,18,1)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1615.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1589" width="0.1315%" height="15" fill="rgb(215,41,42)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1599.50"></text></g><g><title>serde::de::MapAccess::next_entry (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1573" width="0.1315%" height="15" fill="rgb(224,123,36)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1583.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1557" width="0.1315%" height="15" fill="rgb(240,125,3)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1567.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::MapAccess&gt;::next_value_seed (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1541" width="0.1315%" height="15" fill="rgb(205,98,50)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1551.50"></text></g><g><title>plist::de::Deserializer&lt;I&gt;::with_option_mode (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1525" width="0.1315%" height="15" fill="rgb(205,185,37)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1535.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::MapAccess&gt;::next_value_seed::{{closure}} (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1509" width="0.1315%" height="15" fill="rgb(238,207,15)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1519.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1493" width="0.1315%" height="15" fill="rgb(213,199,42)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1503.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1477" width="0.1315%" height="15" fill="rgb(235,201,11)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1487.50"></text></g><g><title>&lt;&amp;mut plist::de::Deserializer&lt;I&gt; as serde::de::Deserializer&gt;::deserialize_any (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1461" width="0.1315%" height="15" fill="rgb(207,46,11)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1471.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1445" width="0.1315%" height="15" fill="rgb(241,35,35)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1455.50"></text></g><g><title>serde::de::SeqAccess::next_element (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1429" width="0.1315%" height="15" fill="rgb(243,32,47)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1439.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::SeqAccess&gt;::next_element_seed (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1413" width="0.1315%" height="15" fill="rgb(247,202,23)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1423.50"></text></g><g><title>plist::de::Deserializer&lt;I&gt;::with_option_mode (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1397" width="0.1315%" height="15" fill="rgb(219,102,11)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1407.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::SeqAccess&gt;::next_element_seed::{{closure}} (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1381" width="0.1315%" height="15" fill="rgb(243,110,44)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1391.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1365" width="0.1315%" height="15" fill="rgb(222,74,54)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1375.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1349" width="0.1315%" height="15" fill="rgb(216,99,12)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1359.50"></text></g><g><title>&lt;&amp;mut plist::de::Deserializer&lt;I&gt; as serde::de::Deserializer&gt;::deserialize_any (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1333" width="0.1315%" height="15" fill="rgb(226,22,26)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1343.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8,834,684 samples, 0.13%)</title><rect x="0.7105%" y="1317" width="0.1315%" height="15" fill="rgb(217,163,10)" fg:x="47736027" fg:w="8834684"/><text x="0.9605%" y="1327.50"></text></g><g><title>serde::de::MapAccess::next_value (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1301" width="0.0426%" height="15" fill="rgb(213,25,53)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1311.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::MapAccess&gt;::next_value_seed (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1285" width="0.0426%" height="15" fill="rgb(252,105,26)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1295.50"></text></g><g><title>plist::de::Deserializer&lt;I&gt;::with_option_mode (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1269" width="0.0426%" height="15" fill="rgb(220,39,43)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1279.50"></text></g><g><title>&lt;plist::de::MapAndSeqAccess&lt;I&gt; as serde::de::MapAccess&gt;::next_value_seed::{{closure}} (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1253" width="0.0426%" height="15" fill="rgb(229,68,48)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1263.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1237" width="0.0426%" height="15" fill="rgb(252,8,32)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1247.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1221" width="0.0426%" height="15" fill="rgb(223,20,43)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1231.50"></text></g><g><title>&lt;&amp;mut plist::de::Deserializer&lt;I&gt; as serde::de::Deserializer&gt;::deserialize_any (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1205" width="0.0426%" height="15" fill="rgb(229,81,49)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1215.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1189" width="0.0426%" height="15" fill="rgb(236,28,36)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1199.50"></text></g><g><title>&lt;plist::stream::xml_reader::XmlReader&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1173" width="0.0426%" height="15" fill="rgb(249,185,26)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1183.50"></text></g><g><title>plist::stream::xml_reader::ReaderState&lt;R&gt;::read_next (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1157" width="0.0426%" height="15" fill="rgb(249,174,33)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1167.50"></text></g><g><title>plist::stream::xml_reader::ReaderState&lt;R&gt;::read_xml_event (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1141" width="0.0426%" height="15" fill="rgb(233,201,37)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1151.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1125" width="0.0426%" height="15" fill="rgb(221,78,26)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1135.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1109" width="0.0426%" height="15" fill="rgb(250,127,30)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1119.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1093" width="0.0426%" height="15" fill="rgb(230,49,44)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1103.50"></text></g><g><title>quick_xml::reader::state::ReaderState::emit_start (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1077" width="0.0426%" height="15" fill="rgb(229,67,23)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2,861,896 samples, 0.04%)</title><rect x="0.7994%" y="1061" width="0.0426%" height="15" fill="rgb(249,83,47)" fg:x="53708815" fg:w="2861896"/><text x="1.0494%" y="1071.50"></text></g><g><title>&lt;syntect::highlighting::selector::ScopeSelectors as core::str::traits::FromStr&gt;::from_str (8,597,805 samples, 0.13%)</title><rect x="0.8420%" y="1621" width="0.1280%" height="15" fill="rgb(215,43,3)" fg:x="56570711" fg:w="8597805"/><text x="1.0920%" y="1631.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,089,041 samples, 0.06%)</title><rect x="0.9091%" y="1605" width="0.0609%" height="15" fill="rgb(238,154,13)" fg:x="61079475" fg:w="4089041"/><text x="1.1591%" y="1615.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (4,089,041 samples, 0.06%)</title><rect x="0.9091%" y="1589" width="0.0609%" height="15" fill="rgb(219,56,2)" fg:x="61079475" fg:w="4089041"/><text x="1.1591%" y="1599.50"></text></g><g><title>&lt;core::str::pattern::CharSliceSearcher as core::str::pattern::Searcher&gt;::next_match (4,089,041 samples, 0.06%)</title><rect x="0.9091%" y="1573" width="0.0609%" height="15" fill="rgb(233,0,4)" fg:x="61079475" fg:w="4089041"/><text x="1.1591%" y="1583.50"></text></g><g><title>core::str::pattern::Searcher::next_match (4,089,041 samples, 0.06%)</title><rect x="0.9091%" y="1557" width="0.0609%" height="15" fill="rgb(235,30,7)" fg:x="61079475" fg:w="4089041"/><text x="1.1591%" y="1567.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (4,089,041 samples, 0.06%)</title><rect x="0.9091%" y="1541" width="0.0609%" height="15" fill="rgb(250,79,13)" fg:x="61079475" fg:w="4089041"/><text x="1.1591%" y="1551.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4,089,041 samples, 0.06%)</title><rect x="0.9091%" y="1525" width="0.0609%" height="15" fill="rgb(211,146,34)" fg:x="61079475" fg:w="4089041"/><text x="1.1591%" y="1535.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4,089,041 samples, 0.06%)</title><rect x="0.9091%" y="1509" width="0.0609%" height="15" fill="rgb(228,22,38)" fg:x="61079475" fg:w="4089041"/><text x="1.1591%" y="1519.50"></text></g><g><title>core::str::validations::next_code_point (4,089,041 samples, 0.06%)</title><rect x="0.9091%" y="1493" width="0.0609%" height="15" fill="rgb(235,168,5)" fg:x="61079475" fg:w="4089041"/><text x="1.1591%" y="1503.50"></text></g><g><title>syntect::highlighting::theme_set::ThemeSet::get_theme (20,023,173 samples, 0.30%)</title><rect x="0.7105%" y="1685" width="0.2980%" height="15" fill="rgb(221,155,16)" fg:x="47736027" fg:w="20023173"/><text x="0.9605%" y="1695.50"></text></g><g><title>syntect::highlighting::theme_set::ThemeSet::load_from_reader (20,023,173 samples, 0.30%)</title><rect x="0.7105%" y="1669" width="0.2980%" height="15" fill="rgb(215,215,53)" fg:x="47736027" fg:w="20023173"/><text x="0.9605%" y="1679.50"></text></g><g><title>syntect::highlighting::theme_load::&lt;impl syntect::highlighting::settings::ParseSettings for syntect::highlighting::theme::Theme&gt;::parse_settings (11,188,489 samples, 0.17%)</title><rect x="0.8420%" y="1653" width="0.1665%" height="15" fill="rgb(223,4,10)" fg:x="56570711" fg:w="11188489"/><text x="1.0920%" y="1663.50"></text></g><g><title>syntect::highlighting::theme_load::&lt;impl syntect::highlighting::settings::ParseSettings for syntect::highlighting::theme::ThemeItem&gt;::parse_settings (11,188,489 samples, 0.17%)</title><rect x="0.8420%" y="1637" width="0.1665%" height="15" fill="rgb(234,103,6)" fg:x="56570711" fg:w="11188489"/><text x="1.0920%" y="1647.50"></text></g><g><title>syntect::highlighting::theme_load::&lt;impl syntect::highlighting::settings::ParseSettings for syntect::highlighting::style::StyleModifier&gt;::parse_settings (2,590,684 samples, 0.04%)</title><rect x="0.9699%" y="1621" width="0.0386%" height="15" fill="rgb(227,97,0)" fg:x="65168516" fg:w="2590684"/><text x="1.2199%" y="1631.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::remove (2,590,684 samples, 0.04%)</title><rect x="0.9699%" y="1605" width="0.0386%" height="15" fill="rgb(234,150,53)" fg:x="65168516" fg:w="2590684"/><text x="1.2199%" y="1615.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (2,590,684 samples, 0.04%)</title><rect x="0.9699%" y="1589" width="0.0386%" height="15" fill="rgb(228,201,54)" fg:x="65168516" fg:w="2590684"/><text x="1.2199%" y="1599.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (2,590,684 samples, 0.04%)</title><rect x="0.9699%" y="1573" width="0.0386%" height="15" fill="rgb(222,22,37)" fg:x="65168516" fg:w="2590684"/><text x="1.2199%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1653" width="0.0585%" height="15" fill="rgb(237,53,32)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1663.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1637" width="0.0585%" height="15" fill="rgb(233,25,53)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1647.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1621" width="0.0585%" height="15" fill="rgb(210,40,34)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1631.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1605" width="0.0585%" height="15" fill="rgb(241,220,44)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1589" width="0.0585%" height="15" fill="rgb(235,28,35)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1573" width="0.0585%" height="15" fill="rgb(210,56,17)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1583.50"></text></g><g><title>&lt;syntect::highlighting::highlighter::HighlightIterator as core::iter::traits::iterator::Iterator&gt;::next (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1557" width="0.0585%" height="15" fill="rgb(224,130,29)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1567.50"></text></g><g><title>&lt;syntect::highlighting::highlighter::RangedHighlightIterator as core::iter::traits::iterator::Iterator&gt;::next (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1541" width="0.0585%" height="15" fill="rgb(235,212,8)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1551.50"></text></g><g><title>syntect::parsing::scope::ScopeStack::apply_with_hook (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1525" width="0.0585%" height="15" fill="rgb(223,33,50)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1535.50"></text></g><g><title>&lt;syntect::highlighting::highlighter::RangedHighlightIterator as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1509" width="0.0585%" height="15" fill="rgb(219,149,13)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1519.50"></text></g><g><title>syntect::highlighting::highlighter::Highlighter::finalize_style_with_multis (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1493" width="0.0585%" height="15" fill="rgb(250,156,29)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1477" width="0.0585%" height="15" fill="rgb(216,193,19)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1487.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1461" width="0.0585%" height="15" fill="rgb(216,135,14)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1471.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1445" width="0.0585%" height="15" fill="rgb(241,47,5)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1455.50"></text></g><g><title>syntect::highlighting::highlighter::Highlighter::finalize_style_with_multis::{{closure}} (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1429" width="0.0585%" height="15" fill="rgb(233,42,35)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1439.50"></text></g><g><title>syntect::highlighting::selector::ScopeSelector::does_match (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1413" width="0.0585%" height="15" fill="rgb(231,13,6)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1423.50"></text></g><g><title>syntect::parsing::scope::ScopeStack::does_match (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1397" width="0.0585%" height="15" fill="rgb(207,181,40)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1407.50"></text></g><g><title>syntect::parsing::scope::Scope::is_prefix_of (3,927,547 samples, 0.06%)</title><rect x="1.0085%" y="1381" width="0.0585%" height="15" fill="rgb(254,173,49)" fg:x="67759200" fg:w="3927547"/><text x="1.2585%" y="1391.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="901" width="0.0614%" height="15" fill="rgb(221,1,38)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="911.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="885" width="0.0614%" height="15" fill="rgb(206,124,46)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="895.50"></text></g><g><title>serde::de::SeqAccess::next_element (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="869" width="0.0614%" height="15" fill="rgb(249,21,11)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="879.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="853" width="0.0614%" height="15" fill="rgb(222,201,40)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="837" width="0.0614%" height="15" fill="rgb(235,61,29)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="847.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::Pattern&gt;::deserialize (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="821" width="0.0614%" height="15" fill="rgb(219,207,3)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="805" width="0.0614%" height="15" fill="rgb(222,56,46)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="815.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::Pattern&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="789" width="0.0614%" height="15" fill="rgb(239,76,54)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="799.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="773" width="0.0614%" height="15" fill="rgb(231,124,27)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="757" width="0.0614%" height="15" fill="rgb(249,195,6)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="741" width="0.0614%" height="15" fill="rgb(237,174,47)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="751.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::MatchPattern&gt;::deserialize (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="725" width="0.0614%" height="15" fill="rgb(206,201,31)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="709" width="0.0614%" height="15" fill="rgb(231,57,52)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="693" width="0.0614%" height="15" fill="rgb(248,177,22)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="703.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::MatchPattern&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="677" width="0.0614%" height="15" fill="rgb(215,211,37)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="661" width="0.0614%" height="15" fill="rgb(241,128,51)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="645" width="0.0614%" height="15" fill="rgb(227,165,31)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="629" width="0.0614%" height="15" fill="rgb(228,167,24)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="639.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::MatchOperation&gt;::deserialize (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="613" width="0.0614%" height="15" fill="rgb(228,143,12)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="597" width="0.0614%" height="15" fill="rgb(249,149,8)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="607.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::MatchOperation&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="581" width="0.0614%" height="15" fill="rgb(243,35,44)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="591.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="565" width="0.0614%" height="15" fill="rgb(246,89,9)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="549" width="0.0614%" height="15" fill="rgb(233,213,13)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="533" width="0.0614%" height="15" fill="rgb(233,141,41)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="517" width="0.0614%" height="15" fill="rgb(239,167,4)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="501" width="0.0614%" height="15" fill="rgb(209,217,16)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="511.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="485" width="0.0614%" height="15" fill="rgb(219,88,35)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="469" width="0.0614%" height="15" fill="rgb(220,193,23)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="453" width="0.0614%" height="15" fill="rgb(230,90,52)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="437" width="0.0614%" height="15" fill="rgb(252,106,19)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="447.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="421" width="0.0614%" height="15" fill="rgb(206,74,20)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="405" width="0.0614%" height="15" fill="rgb(230,138,44)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="415.50"></text></g><g><title>std::io::Read::read_exact (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="389" width="0.0614%" height="15" fill="rgb(235,182,43)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="399.50"></text></g><g><title>std::io::default_read_exact (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="373" width="0.0614%" height="15" fill="rgb(242,16,51)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="383.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="357" width="0.0614%" height="15" fill="rgb(248,9,4)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="367.50"></text></g><g><title>flate2::zio::read (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="341" width="0.0614%" height="15" fill="rgb(210,31,22)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="351.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="325" width="0.0614%" height="15" fill="rgb(239,54,39)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="335.50"></text></g><g><title>flate2::mem::Decompress::decompress (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="309" width="0.0614%" height="15" fill="rgb(230,99,41)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="319.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4,125,787 samples, 0.06%)</title><rect x="1.0670%" y="293" width="0.0614%" height="15" fill="rgb(253,106,12)" fg:x="71686747" fg:w="4125787"/><text x="1.3170%" y="303.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::MatchIter as core::iter::traits::iterator::Iterator&gt;::next (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1605" width="0.1234%" height="15" fill="rgb(213,46,41)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1615.50"></text></g><g><title>syntect::parsing::syntax_set::SyntaxSet::get_context (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1589" width="0.1234%" height="15" fill="rgb(215,133,35)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1599.50"></text></g><g><title>syntect::parsing::syntax_set::SyntaxReference::contexts (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1573" width="0.1234%" height="15" fill="rgb(213,28,5)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1583.50"></text></g><g><title>syntect::parsing::syntax_set::SyntaxReference::lazy_contexts (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1557" width="0.1234%" height="15" fill="rgb(215,77,49)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1567.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1541" width="0.1234%" height="15" fill="rgb(248,100,22)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1551.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1525" width="0.1234%" height="15" fill="rgb(208,67,9)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1535.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1509" width="0.1234%" height="15" fill="rgb(219,133,21)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1519.50"></text></g><g><title>once_cell::imp::initialize_or_wait (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1493" width="0.1234%" height="15" fill="rgb(246,46,29)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1503.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1477" width="0.1234%" height="15" fill="rgb(246,185,52)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1487.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1461" width="0.1234%" height="15" fill="rgb(252,136,11)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1471.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1445" width="0.1234%" height="15" fill="rgb(219,138,53)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1455.50"></text></g><g><title>syntect::parsing::syntax_set::SyntaxReference::lazy_contexts::{{closure}} (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1429" width="0.1234%" height="15" fill="rgb(211,51,23)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1439.50"></text></g><g><title>syntect::parsing::syntax_set::LazyContexts::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1413" width="0.1234%" height="15" fill="rgb(247,221,28)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1423.50"></text></g><g><title>syntect::dumps::from_reader (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1397" width="0.1234%" height="15" fill="rgb(251,222,45)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1407.50"></text></g><g><title>syntect::dumps::deserialize_from_reader_impl (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1381" width="0.1234%" height="15" fill="rgb(217,162,53)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1391.50"></text></g><g><title>bincode::deserialize_from (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1365" width="0.1234%" height="15" fill="rgb(229,93,14)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1375.50"></text></g><g><title>bincode::config::Options::deserialize_from (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1349" width="0.1234%" height="15" fill="rgb(209,67,49)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1359.50"></text></g><g><title>bincode::internal::deserialize_from (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1333" width="0.1234%" height="15" fill="rgb(213,87,29)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1343.50"></text></g><g><title>bincode::internal::deserialize_from_seed (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1317" width="0.1234%" height="15" fill="rgb(205,151,52)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1327.50"></text></g><g><title>bincode::internal::deserialize_from_custom_seed (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1301" width="0.1234%" height="15" fill="rgb(253,215,39)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1311.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1285" width="0.1234%" height="15" fill="rgb(221,220,41)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1295.50"></text></g><g><title>syntect::parsing::syntax_set::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_set::LazyContexts&gt;::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1269" width="0.1234%" height="15" fill="rgb(218,133,21)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1279.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1253" width="0.1234%" height="15" fill="rgb(221,193,43)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1263.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1237" width="0.1234%" height="15" fill="rgb(240,128,52)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1247.50"></text></g><g><title>&lt;syntect::parsing::syntax_set::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_set::LazyContexts&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1221" width="0.1234%" height="15" fill="rgb(253,114,12)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1231.50"></text></g><g><title>serde::de::SeqAccess::next_element (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1205" width="0.1234%" height="15" fill="rgb(215,223,47)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1215.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1189" width="0.1234%" height="15" fill="rgb(248,225,23)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1199.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1173" width="0.1234%" height="15" fill="rgb(250,108,0)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1183.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1157" width="0.1234%" height="15" fill="rgb(228,208,7)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1167.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1141" width="0.1234%" height="15" fill="rgb(244,45,10)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1151.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1125" width="0.1234%" height="15" fill="rgb(207,125,25)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1135.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1109" width="0.1234%" height="15" fill="rgb(210,195,18)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1119.50"></text></g><g><title>serde::de::SeqAccess::next_element (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1093" width="0.1234%" height="15" fill="rgb(249,80,12)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1103.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1077" width="0.1234%" height="15" fill="rgb(221,65,9)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1087.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1061" width="0.1234%" height="15" fill="rgb(235,49,36)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1071.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::Context&gt;::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1045" width="0.1234%" height="15" fill="rgb(225,32,20)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1055.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1029" width="0.1234%" height="15" fill="rgb(215,141,46)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1039.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="1013" width="0.1234%" height="15" fill="rgb(250,160,47)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1023.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::Context&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="997" width="0.1234%" height="15" fill="rgb(216,222,40)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="1007.50"></text></g><g><title>serde::de::SeqAccess::next_element (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="981" width="0.1234%" height="15" fill="rgb(234,217,39)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="991.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="965" width="0.1234%" height="15" fill="rgb(207,178,40)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="975.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="949" width="0.1234%" height="15" fill="rgb(221,136,13)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="959.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="933" width="0.1234%" height="15" fill="rgb(249,199,10)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="943.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (8,290,128 samples, 0.12%)</title><rect x="1.0670%" y="917" width="0.1234%" height="15" fill="rgb(249,222,13)" fg:x="71686747" fg:w="8290128"/><text x="1.3170%" y="927.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="901" width="0.0620%" height="15" fill="rgb(244,185,38)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="911.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="885" width="0.0620%" height="15" fill="rgb(236,202,9)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="895.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="869" width="0.0620%" height="15" fill="rgb(250,229,37)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="879.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="853" width="0.0620%" height="15" fill="rgb(206,174,23)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="863.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="837" width="0.0620%" height="15" fill="rgb(211,33,43)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="821" width="0.0620%" height="15" fill="rgb(245,58,50)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="831.50"></text></g><g><title>std::io::Read::read_exact (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="805" width="0.0620%" height="15" fill="rgb(244,68,36)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="815.50"></text></g><g><title>std::io::default_read_exact (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="789" width="0.0620%" height="15" fill="rgb(232,229,15)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="799.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="773" width="0.0620%" height="15" fill="rgb(254,30,23)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="783.50"></text></g><g><title>flate2::zio::read (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="757" width="0.0620%" height="15" fill="rgb(235,160,14)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="767.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="741" width="0.0620%" height="15" fill="rgb(212,155,44)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="751.50"></text></g><g><title>flate2::mem::Decompress::decompress (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="725" width="0.0620%" height="15" fill="rgb(226,2,50)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="735.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4,164,341 samples, 0.06%)</title><rect x="1.1284%" y="709" width="0.0620%" height="15" fill="rgb(234,177,6)" fg:x="75812534" fg:w="4164341"/><text x="1.3784%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4,323,562 samples, 0.06%)</title><rect x="1.1903%" y="1589" width="0.0644%" height="15" fill="rgb(217,24,9)" fg:x="79976875" fg:w="4323562"/><text x="1.4403%" y="1599.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4,323,562 samples, 0.06%)</title><rect x="1.1903%" y="1573" width="0.0644%" height="15" fill="rgb(220,13,46)" fg:x="79976875" fg:w="4323562"/><text x="1.4403%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4,323,562 samples, 0.06%)</title><rect x="1.1903%" y="1557" width="0.0644%" height="15" fill="rgb(239,221,27)" fg:x="79976875" fg:w="4323562"/><text x="1.4403%" y="1567.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4,323,562 samples, 0.06%)</title><rect x="1.1903%" y="1541" width="0.0644%" height="15" fill="rgb(222,198,25)" fg:x="79976875" fg:w="4323562"/><text x="1.4403%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4,323,562 samples, 0.06%)</title><rect x="1.1903%" y="1525" width="0.0644%" height="15" fill="rgb(211,99,13)" fg:x="79976875" fg:w="4323562"/><text x="1.4403%" y="1535.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4,323,562 samples, 0.06%)</title><rect x="1.1903%" y="1509" width="0.0644%" height="15" fill="rgb(232,111,31)" fg:x="79976875" fg:w="4323562"/><text x="1.4403%" y="1519.50"></text></g><g><title>core::intrinsics::likely (4,323,562 samples, 0.06%)</title><rect x="1.1903%" y="1493" width="0.0644%" height="15" fill="rgb(245,82,37)" fg:x="79976875" fg:w="4323562"/><text x="1.4403%" y="1503.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2,819,468 samples, 0.04%)</title><rect x="1.2547%" y="1589" width="0.0420%" height="15" fill="rgb(227,149,46)" fg:x="84300437" fg:w="2819468"/><text x="1.5047%" y="1599.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,819,468 samples, 0.04%)</title><rect x="1.2547%" y="1573" width="0.0420%" height="15" fill="rgb(218,36,50)" fg:x="84300437" fg:w="2819468"/><text x="1.5047%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (2,819,468 samples, 0.04%)</title><rect x="1.2547%" y="1557" width="0.0420%" height="15" fill="rgb(226,80,48)" fg:x="84300437" fg:w="2819468"/><text x="1.5047%" y="1567.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2,819,468 samples, 0.04%)</title><rect x="1.2547%" y="1541" width="0.0420%" height="15" fill="rgb(238,224,15)" fg:x="84300437" fg:w="2819468"/><text x="1.5047%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (2,819,468 samples, 0.04%)</title><rect x="1.2547%" y="1525" width="0.0420%" height="15" fill="rgb(241,136,10)" fg:x="84300437" fg:w="2819468"/><text x="1.5047%" y="1535.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (2,819,468 samples, 0.04%)</title><rect x="1.2547%" y="1509" width="0.0420%" height="15" fill="rgb(208,32,45)" fg:x="84300437" fg:w="2819468"/><text x="1.5047%" y="1519.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2,819,468 samples, 0.04%)</title><rect x="1.2547%" y="1493" width="0.0420%" height="15" fill="rgb(207,135,9)" fg:x="84300437" fg:w="2819468"/><text x="1.5047%" y="1503.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,819,468 samples, 0.04%)</title><rect x="1.2547%" y="1477" width="0.0420%" height="15" fill="rgb(206,86,44)" fg:x="84300437" fg:w="2819468"/><text x="1.5047%" y="1487.50"></text></g><g><title>compile_anchor_node (4,298,243 samples, 0.06%)</title><rect x="1.2967%" y="1333" width="0.0640%" height="15" fill="rgb(245,177,15)" fg:x="87119905" fg:w="4298243"/><text x="1.5467%" y="1343.50"></text></g><g><title>compile_tree (4,298,243 samples, 0.06%)</title><rect x="1.2967%" y="1317" width="0.0640%" height="15" fill="rgb(206,64,50)" fg:x="87119905" fg:w="4298243"/><text x="1.5467%" y="1327.50"></text></g><g><title>compile_tree (4,298,243 samples, 0.06%)</title><rect x="1.2967%" y="1301" width="0.0640%" height="15" fill="rgb(234,36,40)" fg:x="87119905" fg:w="4298243"/><text x="1.5467%" y="1311.50"></text></g><g><title>compile_bag_node (4,298,243 samples, 0.06%)</title><rect x="1.2967%" y="1285" width="0.0640%" height="15" fill="rgb(213,64,8)" fg:x="87119905" fg:w="4298243"/><text x="1.5467%" y="1295.50"></text></g><g><title>compile_bag_memory_node (4,298,243 samples, 0.06%)</title><rect x="1.2967%" y="1269" width="0.0640%" height="15" fill="rgb(210,75,36)" fg:x="87119905" fg:w="4298243"/><text x="1.5467%" y="1279.50"></text></g><g><title>compile_tree (4,298,243 samples, 0.06%)</title><rect x="1.2967%" y="1253" width="0.0640%" height="15" fill="rgb(229,88,21)" fg:x="87119905" fg:w="4298243"/><text x="1.5467%" y="1263.50"></text></g><g><title>compile_tree (4,298,243 samples, 0.06%)</title><rect x="1.2967%" y="1237" width="0.0640%" height="15" fill="rgb(252,204,47)" fg:x="87119905" fg:w="4298243"/><text x="1.5467%" y="1247.50"></text></g><g><title>compile_string_node (4,298,243 samples, 0.06%)</title><rect x="1.2967%" y="1221" width="0.0640%" height="15" fill="rgb(208,77,27)" fg:x="87119905" fg:w="4298243"/><text x="1.5467%" y="1231.50"></text></g><g><title>add_op (3,723,570 samples, 0.06%)</title><rect x="1.3606%" y="1301" width="0.0554%" height="15" fill="rgb(221,76,26)" fg:x="91418148" fg:w="3723570"/><text x="1.6106%" y="1311.50"></text></g><g><title>ops_new (3,723,570 samples, 0.06%)</title><rect x="1.3606%" y="1285" width="0.0554%" height="15" fill="rgb(225,139,18)" fg:x="91418148" fg:w="3723570"/><text x="1.6106%" y="1295.50"></text></g><g><title>ops_resize (3,723,570 samples, 0.06%)</title><rect x="1.3606%" y="1269" width="0.0554%" height="15" fill="rgb(230,137,11)" fg:x="91418148" fg:w="3723570"/><text x="1.6106%" y="1279.50"></text></g><g><title>realloc (3,723,570 samples, 0.06%)</title><rect x="1.3606%" y="1253" width="0.0554%" height="15" fill="rgb(212,28,1)" fg:x="91418148" fg:w="3723570"/><text x="1.6106%" y="1263.50"></text></g><g><title>[libc.so.6] (3,723,570 samples, 0.06%)</title><rect x="1.3606%" y="1237" width="0.0554%" height="15" fill="rgb(248,164,17)" fg:x="91418148" fg:w="3723570"/><text x="1.6106%" y="1247.50"></text></g><g><title>[libc.so.6] (3,723,570 samples, 0.06%)</title><rect x="1.3606%" y="1221" width="0.0554%" height="15" fill="rgb(222,171,42)" fg:x="91418148" fg:w="3723570"/><text x="1.6106%" y="1231.50"></text></g><g><title>compile_tree (11,711,118 samples, 0.17%)</title><rect x="1.2967%" y="1349" width="0.1743%" height="15" fill="rgb(243,84,45)" fg:x="87119905" fg:w="11711118"/><text x="1.5467%" y="1359.50"></text></g><g><title>compile_tree (7,412,875 samples, 0.11%)</title><rect x="1.3606%" y="1333" width="0.1103%" height="15" fill="rgb(252,49,23)" fg:x="91418148" fg:w="7412875"/><text x="1.6106%" y="1343.50"></text></g><g><title>compile_bag_node (7,412,875 samples, 0.11%)</title><rect x="1.3606%" y="1317" width="0.1103%" height="15" fill="rgb(215,19,7)" fg:x="91418148" fg:w="7412875"/><text x="1.6106%" y="1327.50"></text></g><g><title>compile_bag_memory_node (3,689,305 samples, 0.05%)</title><rect x="1.4161%" y="1301" width="0.0549%" height="15" fill="rgb(238,81,41)" fg:x="95141718" fg:w="3689305"/><text x="1.6661%" y="1311.50"></text></g><g><title>compile_tree (3,689,305 samples, 0.05%)</title><rect x="1.4161%" y="1285" width="0.0549%" height="15" fill="rgb(210,199,37)" fg:x="95141718" fg:w="3689305"/><text x="1.6661%" y="1295.50"></text></g><g><title>add_op (3,689,305 samples, 0.05%)</title><rect x="1.4161%" y="1269" width="0.0549%" height="15" fill="rgb(244,192,49)" fg:x="95141718" fg:w="3689305"/><text x="1.6661%" y="1279.50"></text></g><g><title>ops_new (3,689,305 samples, 0.05%)</title><rect x="1.4161%" y="1253" width="0.0549%" height="15" fill="rgb(226,211,11)" fg:x="95141718" fg:w="3689305"/><text x="1.6661%" y="1263.50"></text></g><g><title>ops_resize (3,689,305 samples, 0.05%)</title><rect x="1.4161%" y="1237" width="0.0549%" height="15" fill="rgb(236,162,54)" fg:x="95141718" fg:w="3689305"/><text x="1.6661%" y="1247.50"></text></g><g><title>realloc (3,689,305 samples, 0.05%)</title><rect x="1.4161%" y="1221" width="0.0549%" height="15" fill="rgb(220,229,9)" fg:x="95141718" fg:w="3689305"/><text x="1.6661%" y="1231.50"></text></g><g><title>[libc.so.6] (3,689,305 samples, 0.05%)</title><rect x="1.4161%" y="1205" width="0.0549%" height="15" fill="rgb(250,87,22)" fg:x="95141718" fg:w="3689305"/><text x="1.6661%" y="1215.50"></text></g><g><title>onig_node_free (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1349" width="0.0423%" height="15" fill="rgb(239,43,17)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1359.50"></text></g><g><title>onig_node_free (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1333" width="0.0423%" height="15" fill="rgb(231,177,25)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1343.50"></text></g><g><title>node_free_body (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1317" width="0.0423%" height="15" fill="rgb(219,179,1)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1327.50"></text></g><g><title>onig_node_free (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1301" width="0.0423%" height="15" fill="rgb(238,219,53)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1311.50"></text></g><g><title>onig_node_free (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1285" width="0.0423%" height="15" fill="rgb(232,167,36)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1295.50"></text></g><g><title>node_free_body (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1269" width="0.0423%" height="15" fill="rgb(244,19,51)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1279.50"></text></g><g><title>onig_node_free (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1253" width="0.0423%" height="15" fill="rgb(224,6,22)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1263.50"></text></g><g><title>onig_node_free (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1237" width="0.0423%" height="15" fill="rgb(224,145,5)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1247.50"></text></g><g><title>node_free_body (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1221" width="0.0423%" height="15" fill="rgb(234,130,49)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1231.50"></text></g><g><title>[libc.so.6] (2,841,261 samples, 0.04%)</title><rect x="1.4710%" y="1205" width="0.0423%" height="15" fill="rgb(254,6,2)" fg:x="98831023" fg:w="2841261"/><text x="1.7210%" y="1215.50"></text></g><g><title>fetch_token (5,852,995 samples, 0.09%)</title><rect x="1.6447%" y="1189" width="0.0871%" height="15" fill="rgb(208,96,46)" fg:x="110501389" fg:w="5852995"/><text x="1.8947%" y="1199.50"></text></g><g><title>node_new_str_with_options (3,380,932 samples, 0.05%)</title><rect x="1.7318%" y="1125" width="0.0503%" height="15" fill="rgb(239,3,39)" fg:x="116354384" fg:w="3380932"/><text x="1.9818%" y="1135.50"></text></g><g><title>node_new_str (3,380,932 samples, 0.05%)</title><rect x="1.7318%" y="1109" width="0.0503%" height="15" fill="rgb(233,210,1)" fg:x="116354384" fg:w="3380932"/><text x="1.9818%" y="1119.50"></text></g><g><title>node_new (3,380,932 samples, 0.05%)</title><rect x="1.7318%" y="1093" width="0.0503%" height="15" fill="rgb(244,137,37)" fg:x="116354384" fg:w="3380932"/><text x="1.9818%" y="1103.50"></text></g><g><title>[libc.so.6] (3,380,932 samples, 0.05%)</title><rect x="1.7318%" y="1077" width="0.0503%" height="15" fill="rgb(240,136,2)" fg:x="116354384" fg:w="3380932"/><text x="1.9818%" y="1087.50"></text></g><g><title>[libc.so.6] (3,380,932 samples, 0.05%)</title><rect x="1.7318%" y="1061" width="0.0503%" height="15" fill="rgb(239,18,37)" fg:x="116354384" fg:w="3380932"/><text x="1.9818%" y="1071.50"></text></g><g><title>fetch_token (4,319,355 samples, 0.06%)</title><rect x="1.7821%" y="1061" width="0.0643%" height="15" fill="rgb(218,185,22)" fg:x="119735316" fg:w="4319355"/><text x="2.0321%" y="1071.50"></text></g><g><title>prs_bag (2,823,328 samples, 0.04%)</title><rect x="1.8464%" y="1061" width="0.0420%" height="15" fill="rgb(225,218,4)" fg:x="124054671" fg:w="2823328"/><text x="2.0964%" y="1071.50"></text></g><g><title>node_new_memory (2,823,328 samples, 0.04%)</title><rect x="1.8464%" y="1045" width="0.0420%" height="15" fill="rgb(230,182,32)" fg:x="124054671" fg:w="2823328"/><text x="2.0964%" y="1055.50"></text></g><g><title>node_new_bag (2,823,328 samples, 0.04%)</title><rect x="1.8464%" y="1029" width="0.0420%" height="15" fill="rgb(242,56,43)" fg:x="124054671" fg:w="2823328"/><text x="2.0964%" y="1039.50"></text></g><g><title>node_new (2,823,328 samples, 0.04%)</title><rect x="1.8464%" y="1013" width="0.0420%" height="15" fill="rgb(233,99,24)" fg:x="124054671" fg:w="2823328"/><text x="2.0964%" y="1023.50"></text></g><g><title>prs_bag (30,521,814 samples, 0.45%)</title><rect x="1.7821%" y="1125" width="0.4543%" height="15" fill="rgb(234,209,42)" fg:x="119735316" fg:w="30521814"/><text x="2.0321%" y="1135.50"></text></g><g><title>prs_alts (30,521,814 samples, 0.45%)</title><rect x="1.7821%" y="1109" width="0.4543%" height="15" fill="rgb(227,7,12)" fg:x="119735316" fg:w="30521814"/><text x="2.0321%" y="1119.50"></text></g><g><title>prs_branch (30,521,814 samples, 0.45%)</title><rect x="1.7821%" y="1093" width="0.4543%" height="15" fill="rgb(245,203,43)" fg:x="119735316" fg:w="30521814"/><text x="2.0321%" y="1103.50"></text></g><g><title>prs_exp (30,521,814 samples, 0.45%)</title><rect x="1.7821%" y="1077" width="0.4543%" height="15" fill="rgb(238,205,33)" fg:x="119735316" fg:w="30521814"/><text x="2.0321%" y="1087.50"></text></g><g><title>prs_cc (23,379,131 samples, 0.35%)</title><rect x="1.8884%" y="1061" width="0.3480%" height="15" fill="rgb(231,56,7)" fg:x="126877999" fg:w="23379131"/><text x="2.1384%" y="1071.50"></text></g><g><title>add_ctype_to_cc (23,379,131 samples, 0.35%)</title><rect x="1.8884%" y="1045" width="0.3480%" height="15" fill="rgb(244,186,29)" fg:x="126877999" fg:w="23379131"/><text x="2.1384%" y="1055.50"></text></g><g><title>add_ctype_to_cc_by_range (23,379,131 samples, 0.35%)</title><rect x="1.8884%" y="1029" width="0.3480%" height="15" fill="rgb(234,111,31)" fg:x="126877999" fg:w="23379131"/><text x="2.1384%" y="1039.50"></text></g><g><title>add_code_range_to_buf (23,379,131 samples, 0.35%)</title><rect x="1.8884%" y="1013" width="0.3480%" height="15" fill="rgb(241,149,10)" fg:x="126877999" fg:w="23379131"/><text x="2.1384%" y="1023.50"></text></g><g><title>prs_bag (50,119,029 samples, 0.75%)</title><rect x="1.7318%" y="1189" width="0.7460%" height="15" fill="rgb(249,206,44)" fg:x="116354384" fg:w="50119029"/><text x="1.9818%" y="1199.50"></text></g><g><title>prs_alts (50,119,029 samples, 0.75%)</title><rect x="1.7318%" y="1173" width="0.7460%" height="15" fill="rgb(251,153,30)" fg:x="116354384" fg:w="50119029"/><text x="1.9818%" y="1183.50"></text></g><g><title>prs_branch (50,119,029 samples, 0.75%)</title><rect x="1.7318%" y="1157" width="0.7460%" height="15" fill="rgb(239,152,38)" fg:x="116354384" fg:w="50119029"/><text x="1.9818%" y="1167.50"></text></g><g><title>prs_exp (50,119,029 samples, 0.75%)</title><rect x="1.7318%" y="1141" width="0.7460%" height="15" fill="rgb(249,139,47)" fg:x="116354384" fg:w="50119029"/><text x="1.9818%" y="1151.50"></text></g><g><title>prs_cc (16,216,283 samples, 0.24%)</title><rect x="2.2364%" y="1125" width="0.2414%" height="15" fill="rgb(244,64,35)" fg:x="150257130" fg:w="16216283"/><text x="2.4864%" y="1135.50"></text></g><g><title>add_ctype_to_cc (16,216,283 samples, 0.24%)</title><rect x="2.2364%" y="1109" width="0.2414%" height="15" fill="rgb(216,46,15)" fg:x="150257130" fg:w="16216283"/><text x="2.4864%" y="1119.50"></text></g><g><title>add_ctype_to_cc_by_range (12,468,526 samples, 0.19%)</title><rect x="2.2922%" y="1093" width="0.1856%" height="15" fill="rgb(250,74,19)" fg:x="154004887" fg:w="12468526"/><text x="2.5422%" y="1103.50"></text></g><g><title>add_code_range_to_buf (12,468,526 samples, 0.19%)</title><rect x="2.2922%" y="1077" width="0.1856%" height="15" fill="rgb(249,42,33)" fg:x="154004887" fg:w="12468526"/><text x="2.5422%" y="1087.50"></text></g><g><title>prs_bag (77,225,589 samples, 1.15%)</title><rect x="1.5781%" y="1253" width="1.1494%" height="15" fill="rgb(242,149,17)" fg:x="106028181" fg:w="77225589"/><text x="1.8281%" y="1263.50"></text></g><g><title>prs_alts (77,225,589 samples, 1.15%)</title><rect x="1.5781%" y="1237" width="1.1494%" height="15" fill="rgb(244,29,21)" fg:x="106028181" fg:w="77225589"/><text x="1.8281%" y="1247.50"></text></g><g><title>prs_branch (77,225,589 samples, 1.15%)</title><rect x="1.5781%" y="1221" width="1.1494%" height="15" fill="rgb(220,130,37)" fg:x="106028181" fg:w="77225589"/><text x="1.8281%" y="1231.50"></text></g><g><title>prs_exp (72,752,381 samples, 1.08%)</title><rect x="1.6447%" y="1205" width="1.0828%" height="15" fill="rgb(211,67,2)" fg:x="110501389" fg:w="72752381"/><text x="1.8947%" y="1215.50"></text></g><g><title>prs_cc (16,780,357 samples, 0.25%)</title><rect x="2.4777%" y="1189" width="0.2498%" height="15" fill="rgb(235,68,52)" fg:x="166473413" fg:w="16780357"/><text x="2.7277%" y="1199.50"></text></g><g><title>add_ctype_to_cc (16,780,357 samples, 0.25%)</title><rect x="2.4777%" y="1173" width="0.2498%" height="15" fill="rgb(246,142,3)" fg:x="166473413" fg:w="16780357"/><text x="2.7277%" y="1183.50"></text></g><g><title>add_ctype_to_cc_by_range (16,780,357 samples, 0.25%)</title><rect x="2.4777%" y="1157" width="0.2498%" height="15" fill="rgb(241,25,7)" fg:x="166473413" fg:w="16780357"/><text x="2.7277%" y="1167.50"></text></g><g><title>add_code_range_to_buf (16,780,357 samples, 0.25%)</title><rect x="2.4777%" y="1141" width="0.2498%" height="15" fill="rgb(242,119,39)" fg:x="166473413" fg:w="16780357"/><text x="2.7277%" y="1151.50"></text></g><g><title>parse_and_tune (87,392,972 samples, 1.30%)</title><rect x="1.5133%" y="1349" width="1.3007%" height="15" fill="rgb(241,98,45)" fg:x="101672284" fg:w="87392972"/><text x="1.7633%" y="1359.50"></text></g><g><title>onig_parse_tree (87,392,972 samples, 1.30%)</title><rect x="1.5133%" y="1333" width="1.3007%" height="15" fill="rgb(254,28,30)" fg:x="101672284" fg:w="87392972"/><text x="1.7633%" y="1343.50"></text></g><g><title>prs_regexp (87,392,972 samples, 1.30%)</title><rect x="1.5133%" y="1317" width="1.3007%" height="15" fill="rgb(241,142,54)" fg:x="101672284" fg:w="87392972"/><text x="1.7633%" y="1327.50"></text></g><g><title>prs_alts (87,392,972 samples, 1.30%)</title><rect x="1.5133%" y="1301" width="1.3007%" height="15" fill="rgb(222,85,15)" fg:x="101672284" fg:w="87392972"/><text x="1.7633%" y="1311.50"></text></g><g><title>prs_branch (87,392,972 samples, 1.30%)</title><rect x="1.5133%" y="1285" width="1.3007%" height="15" fill="rgb(210,85,47)" fg:x="101672284" fg:w="87392972"/><text x="1.7633%" y="1295.50"></text></g><g><title>prs_exp (87,392,972 samples, 1.30%)</title><rect x="1.5133%" y="1269" width="1.3007%" height="15" fill="rgb(224,206,25)" fg:x="101672284" fg:w="87392972"/><text x="1.7633%" y="1279.50"></text></g><g><title>prs_cc (5,811,486 samples, 0.09%)</title><rect x="2.7275%" y="1253" width="0.0865%" height="15" fill="rgb(243,201,19)" fg:x="183253770" fg:w="5811486"/><text x="2.9775%" y="1263.50"></text></g><g><title>add_ctype_to_cc (5,811,486 samples, 0.09%)</title><rect x="2.7275%" y="1237" width="0.0865%" height="15" fill="rgb(236,59,4)" fg:x="183253770" fg:w="5811486"/><text x="2.9775%" y="1247.50"></text></g><g><title>add_ctype_to_cc_by_range (5,811,486 samples, 0.09%)</title><rect x="2.7275%" y="1221" width="0.0865%" height="15" fill="rgb(254,179,45)" fg:x="183253770" fg:w="5811486"/><text x="2.9775%" y="1231.50"></text></g><g><title>add_code_range_to_buf (5,811,486 samples, 0.09%)</title><rect x="2.7275%" y="1205" width="0.0865%" height="15" fill="rgb(226,14,10)" fg:x="183253770" fg:w="5811486"/><text x="2.9775%" y="1215.50"></text></g><g><title>mml_add (4,484,454 samples, 0.07%)</title><rect x="2.8140%" y="1285" width="0.0667%" height="15" fill="rgb(244,27,41)" fg:x="189065256" fg:w="4484454"/><text x="3.0640%" y="1295.50"></text></g><g><title>syntect::parsing::regex::Regex::regex (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1573" width="1.6263%" height="15" fill="rgb(235,35,32)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1583.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1557" width="1.6263%" height="15" fill="rgb(218,68,31)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1567.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1541" width="1.6263%" height="15" fill="rgb(207,120,37)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1551.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1525" width="1.6263%" height="15" fill="rgb(227,98,0)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1535.50"></text></g><g><title>once_cell::imp::initialize_or_wait (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1509" width="1.6263%" height="15" fill="rgb(207,7,3)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1519.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1493" width="1.6263%" height="15" fill="rgb(206,98,19)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1503.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1477" width="1.6263%" height="15" fill="rgb(217,5,26)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1487.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1461" width="1.6263%" height="15" fill="rgb(235,190,38)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1471.50"></text></g><g><title>syntect::parsing::regex::Regex::regex::{{closure}} (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1445" width="1.6263%" height="15" fill="rgb(247,86,24)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1455.50"></text></g><g><title>syntect::parsing::regex::regex_impl::Regex::new (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1429" width="1.6263%" height="15" fill="rgb(205,101,16)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1439.50"></text></g><g><title>onig::Regex::with_options (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1413" width="1.6263%" height="15" fill="rgb(246,168,33)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1423.50"></text></g><g><title>onig::Regex::with_options_and_encoding (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1397" width="1.6263%" height="15" fill="rgb(231,114,1)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1407.50"></text></g><g><title>onig_new (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1381" width="1.6263%" height="15" fill="rgb(207,184,53)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1391.50"></text></g><g><title>onig_compile (109,266,917 samples, 1.63%)</title><rect x="1.2967%" y="1365" width="1.6263%" height="15" fill="rgb(224,95,51)" fg:x="87119905" fg:w="109266917"/><text x="1.5467%" y="1375.50"></text></g><g><title>set_optimize_info_from_tree (7,321,566 samples, 0.11%)</title><rect x="2.8140%" y="1349" width="0.1090%" height="15" fill="rgb(212,188,45)" fg:x="189065256" fg:w="7321566"/><text x="3.0640%" y="1359.50"></text></g><g><title>optimize_nodes (7,321,566 samples, 0.11%)</title><rect x="2.8140%" y="1333" width="0.1090%" height="15" fill="rgb(223,154,38)" fg:x="189065256" fg:w="7321566"/><text x="3.0640%" y="1343.50"></text></g><g><title>optimize_nodes (7,321,566 samples, 0.11%)</title><rect x="2.8140%" y="1317" width="0.1090%" height="15" fill="rgb(251,22,52)" fg:x="189065256" fg:w="7321566"/><text x="3.0640%" y="1327.50"></text></g><g><title>optimize_nodes (7,321,566 samples, 0.11%)</title><rect x="2.8140%" y="1301" width="0.1090%" height="15" fill="rgb(229,209,22)" fg:x="189065256" fg:w="7321566"/><text x="3.0640%" y="1311.50"></text></g><g><title>optimize_nodes (2,837,112 samples, 0.04%)</title><rect x="2.8807%" y="1285" width="0.0422%" height="15" fill="rgb(234,138,34)" fg:x="193549710" fg:w="2837112"/><text x="3.1307%" y="1295.50"></text></g><g><title>alt_merge_node_opt_info (2,837,112 samples, 0.04%)</title><rect x="2.8807%" y="1269" width="0.0422%" height="15" fill="rgb(212,95,11)" fg:x="193549710" fg:w="2837112"/><text x="3.1307%" y="1279.50"></text></g><g><title>mml_alt_merge (2,837,112 samples, 0.04%)</title><rect x="2.8807%" y="1253" width="0.0422%" height="15" fill="rgb(240,179,47)" fg:x="193549710" fg:w="2837112"/><text x="3.1307%" y="1263.50"></text></g><g><title>forward_search (3,274,971 samples, 0.05%)</title><rect x="2.9805%" y="1509" width="0.0487%" height="15" fill="rgb(240,163,11)" fg:x="200250180" fg:w="3274971"/><text x="3.2305%" y="1519.50"></text></g><g><title>sunday_quick_search (3,274,971 samples, 0.05%)</title><rect x="2.9805%" y="1493" width="0.0487%" height="15" fill="rgb(236,37,12)" fg:x="200250180" fg:w="3274971"/><text x="3.2305%" y="1503.50"></text></g><g><title>match_at (13,019,781 samples, 0.19%)</title><rect x="3.0292%" y="1509" width="0.1938%" height="15" fill="rgb(232,164,16)" fg:x="203525151" fg:w="13019781"/><text x="3.2792%" y="1519.50"></text></g><g><title>mbc_to_code (4,491,386 samples, 0.07%)</title><rect x="3.1561%" y="1493" width="0.0668%" height="15" fill="rgb(244,205,15)" fg:x="212053546" fg:w="4491386"/><text x="3.4061%" y="1503.50"></text></g><g><title>syntect::easy::HighlightLines::highlight_line (153,223,067 samples, 2.28%)</title><rect x="1.0085%" y="1669" width="2.2805%" height="15" fill="rgb(223,117,47)" fg:x="67759200" fg:w="153223067"/><text x="1.2585%" y="1679.50">s..</text></g><g><title>syntect::parsing::parser::ParseState::parse_line (149,295,520 samples, 2.22%)</title><rect x="1.0670%" y="1653" width="2.2221%" height="15" fill="rgb(244,107,35)" fg:x="71686747" fg:w="149295520"/><text x="1.3170%" y="1663.50">s..</text></g><g><title>syntect::parsing::parser::ParseState::parse_next_token (149,295,520 samples, 2.22%)</title><rect x="1.0670%" y="1637" width="2.2221%" height="15" fill="rgb(205,140,8)" fg:x="71686747" fg:w="149295520"/><text x="1.3170%" y="1647.50">s..</text></g><g><title>syntect::parsing::parser::ParseState::find_best_match (149,295,520 samples, 2.22%)</title><rect x="1.0670%" y="1621" width="2.2221%" height="15" fill="rgb(228,84,46)" fg:x="71686747" fg:w="149295520"/><text x="1.3170%" y="1631.50">s..</text></g><g><title>syntect::parsing::parser::ParseState::search (141,005,392 samples, 2.10%)</title><rect x="1.1903%" y="1605" width="2.0987%" height="15" fill="rgb(254,188,9)" fg:x="79976875" fg:w="141005392"/><text x="1.4403%" y="1615.50">s..</text></g><g><title>syntect::parsing::regex::Regex::search (133,862,362 samples, 1.99%)</title><rect x="1.2967%" y="1589" width="1.9924%" height="15" fill="rgb(206,112,54)" fg:x="87119905" fg:w="133862362"/><text x="1.5467%" y="1599.50">s..</text></g><g><title>syntect::parsing::regex::regex_impl::Regex::search (24,595,445 samples, 0.37%)</title><rect x="2.9230%" y="1573" width="0.3661%" height="15" fill="rgb(216,84,49)" fg:x="196386822" fg:w="24595445"/><text x="3.1730%" y="1583.50"></text></g><g><title>onig::Regex::search_with_param (24,595,445 samples, 0.37%)</title><rect x="2.9230%" y="1557" width="0.3661%" height="15" fill="rgb(214,194,35)" fg:x="196386822" fg:w="24595445"/><text x="3.1730%" y="1567.50"></text></g><g><title>onig_search_with_param (24,595,445 samples, 0.37%)</title><rect x="2.9230%" y="1541" width="0.3661%" height="15" fill="rgb(249,28,3)" fg:x="196386822" fg:w="24595445"/><text x="3.1730%" y="1551.50"></text></g><g><title>search_in_range (24,595,445 samples, 0.37%)</title><rect x="2.9230%" y="1525" width="0.3661%" height="15" fill="rgb(222,56,52)" fg:x="196386822" fg:w="24595445"/><text x="3.1730%" y="1535.50"></text></g><g><title>onig_region_resize_clear (4,437,335 samples, 0.07%)</title><rect x="3.2230%" y="1509" width="0.0660%" height="15" fill="rgb(245,217,50)" fg:x="216544932" fg:w="4437335"/><text x="3.4730%" y="1519.50"></text></g><g><title>onig_region_resize (4,437,335 samples, 0.07%)</title><rect x="3.2230%" y="1493" width="0.0660%" height="15" fill="rgb(213,201,24)" fg:x="216544932" fg:w="4437335"/><text x="3.4730%" y="1503.50"></text></g><g><title>syntect::highlighting::highlighter::Highlighter::new (2,723,307 samples, 0.04%)</title><rect x="3.2890%" y="1653" width="0.0405%" height="15" fill="rgb(248,116,28)" fg:x="220982267" fg:w="2723307"/><text x="3.5390%" y="1663.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,723,307 samples, 0.04%)</title><rect x="3.2890%" y="1637" width="0.0405%" height="15" fill="rgb(219,72,43)" fg:x="220982267" fg:w="2723307"/><text x="3.5390%" y="1647.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,723,307 samples, 0.04%)</title><rect x="3.2890%" y="1621" width="0.0405%" height="15" fill="rgb(209,138,14)" fg:x="220982267" fg:w="2723307"/><text x="3.5390%" y="1631.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,723,307 samples, 0.04%)</title><rect x="3.2890%" y="1605" width="0.0405%" height="15" fill="rgb(222,18,33)" fg:x="220982267" fg:w="2723307"/><text x="3.5390%" y="1615.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,723,307 samples, 0.04%)</title><rect x="3.2890%" y="1589" width="0.0405%" height="15" fill="rgb(213,199,7)" fg:x="220982267" fg:w="2723307"/><text x="3.5390%" y="1599.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2,723,307 samples, 0.04%)</title><rect x="3.2890%" y="1573" width="0.0405%" height="15" fill="rgb(250,110,10)" fg:x="220982267" fg:w="2723307"/><text x="3.5390%" y="1583.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (4,113,634 samples, 0.06%)</title><rect x="3.3296%" y="677" width="0.0612%" height="15" fill="rgb(248,123,6)" fg:x="223705574" fg:w="4113634"/><text x="3.5796%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (4,113,634 samples, 0.06%)</title><rect x="3.3296%" y="661" width="0.0612%" height="15" fill="rgb(206,91,31)" fg:x="223705574" fg:w="4113634"/><text x="3.5796%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4,113,634 samples, 0.06%)</title><rect x="3.3296%" y="645" width="0.0612%" height="15" fill="rgb(211,154,13)" fg:x="223705574" fg:w="4113634"/><text x="3.5796%" y="655.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4,113,634 samples, 0.06%)</title><rect x="3.3296%" y="629" width="0.0612%" height="15" fill="rgb(225,148,7)" fg:x="223705574" fg:w="4113634"/><text x="3.5796%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="677" width="0.0461%" height="15" fill="rgb(220,160,43)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="661" width="0.0461%" height="15" fill="rgb(213,52,39)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="671.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="645" width="0.0461%" height="15" fill="rgb(243,137,7)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="655.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="629" width="0.0461%" height="15" fill="rgb(230,79,13)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="613" width="0.0461%" height="15" fill="rgb(247,105,23)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="597" width="0.0461%" height="15" fill="rgb(223,179,41)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="581" width="0.0461%" height="15" fill="rgb(218,9,34)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="591.50"></text></g><g><title>serde::de::SeqAccess::next_element (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="565" width="0.0461%" height="15" fill="rgb(222,106,8)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="575.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="549" width="0.0461%" height="15" fill="rgb(211,220,0)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="533" width="0.0461%" height="15" fill="rgb(229,52,16)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="517" width="0.0461%" height="15" fill="rgb(212,155,18)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="501" width="0.0461%" height="15" fill="rgb(242,21,14)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize::TupleVisitor&lt;T0,T1&gt; as serde::de::Visitor&gt;::visit_seq (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="485" width="0.0461%" height="15" fill="rgb(222,19,48)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="495.50"></text></g><g><title>serde::de::SeqAccess::next_element (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="469" width="0.0461%" height="15" fill="rgb(232,45,27)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="479.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="453" width="0.0461%" height="15" fill="rgb(249,103,42)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="463.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="437" width="0.0461%" height="15" fill="rgb(246,81,33)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="421" width="0.0461%" height="15" fill="rgb(252,33,42)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="405" width="0.0461%" height="15" fill="rgb(209,212,41)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="415.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="389" width="0.0461%" height="15" fill="rgb(207,154,6)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="373" width="0.0461%" height="15" fill="rgb(223,64,47)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="383.50"></text></g><g><title>serde::de::SeqAccess::next_element (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="357" width="0.0461%" height="15" fill="rgb(211,161,38)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="367.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="341" width="0.0461%" height="15" fill="rgb(219,138,40)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="325" width="0.0461%" height="15" fill="rgb(241,228,46)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="335.50"></text></g><g><title>&lt;syntect::parsing::scope::Scope as serde::de::Deserialize&gt;::deserialize (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="309" width="0.0461%" height="15" fill="rgb(223,209,38)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="319.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_str (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="293" width="0.0461%" height="15" fill="rgb(236,164,45)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="303.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as bincode::de::read::BincodeRead&gt;::forward_read_str (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="277" width="0.0461%" height="15" fill="rgb(231,15,5)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="287.50"></text></g><g><title>&lt;&lt;syntect::parsing::scope::Scope as serde::de::Deserialize&gt;::deserialize::ScopeVisitor as serde::de::Visitor&gt;::visit_str (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="261" width="0.0461%" height="15" fill="rgb(252,35,15)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="271.50"></text></g><g><title>syntect::parsing::scope::Scope::new (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="245" width="0.0461%" height="15" fill="rgb(248,181,18)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="255.50"></text></g><g><title>syntect::parsing::scope::ScopeRepository::build (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="229" width="0.0461%" height="15" fill="rgb(233,39,42)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="213" width="0.0461%" height="15" fill="rgb(238,110,33)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="197" width="0.0461%" height="15" fill="rgb(233,195,10)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="181" width="0.0461%" height="15" fill="rgb(254,105,3)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="165" width="0.0461%" height="15" fill="rgb(221,225,9)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="149" width="0.0461%" height="15" fill="rgb(224,227,45)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="159.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="133" width="0.0461%" height="15" fill="rgb(229,198,43)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="143.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="117" width="0.0461%" height="15" fill="rgb(206,209,35)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="127.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="101" width="0.0461%" height="15" fill="rgb(245,195,53)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="111.50"></text></g><g><title>core::slice::memchr::memchr (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="85" width="0.0461%" height="15" fill="rgb(240,92,26)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="95.50"></text></g><g><title>core::slice::memchr::memchr_aligned (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="69" width="0.0461%" height="15" fill="rgb(207,40,23)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="79.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="53" width="0.0461%" height="15" fill="rgb(223,111,35)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="63.50"></text></g><g><title>core::slice::memchr::memchr_naive (3,095,068 samples, 0.05%)</title><rect x="3.3908%" y="37" width="0.0461%" height="15" fill="rgb(229,147,28)" fg:x="227819208" fg:w="3095068"/><text x="3.6408%" y="47.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1221" width="0.1736%" height="15" fill="rgb(211,29,28)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1231.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1205" width="0.1736%" height="15" fill="rgb(228,72,33)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1215.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1189" width="0.1736%" height="15" fill="rgb(205,214,31)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1199.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1173" width="0.1736%" height="15" fill="rgb(224,111,15)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1183.50"></text></g><g><title>serde::de::SeqAccess::next_element (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1157" width="0.1736%" height="15" fill="rgb(253,21,26)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1167.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1141" width="0.1736%" height="15" fill="rgb(245,139,43)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1151.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1125" width="0.1736%" height="15" fill="rgb(252,170,7)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1135.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::Context&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1109" width="0.1736%" height="15" fill="rgb(231,118,14)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1119.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1093" width="0.1736%" height="15" fill="rgb(238,83,0)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1103.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1077" width="0.1736%" height="15" fill="rgb(221,39,39)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1087.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::Context&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1061" width="0.1736%" height="15" fill="rgb(222,119,46)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1071.50"></text></g><g><title>serde::de::SeqAccess::next_element (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1045" width="0.1736%" height="15" fill="rgb(222,165,49)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1055.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1029" width="0.1736%" height="15" fill="rgb(219,113,52)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1039.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="1013" width="0.1736%" height="15" fill="rgb(214,7,15)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1023.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="997" width="0.1736%" height="15" fill="rgb(235,32,4)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="1007.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="981" width="0.1736%" height="15" fill="rgb(238,90,54)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="991.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="965" width="0.1736%" height="15" fill="rgb(213,208,19)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="975.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="949" width="0.1736%" height="15" fill="rgb(233,156,4)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="959.50"></text></g><g><title>serde::de::SeqAccess::next_element (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="933" width="0.1736%" height="15" fill="rgb(207,194,5)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="943.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="917" width="0.1736%" height="15" fill="rgb(206,111,30)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="927.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="901" width="0.1736%" height="15" fill="rgb(243,70,54)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="911.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::Pattern&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="885" width="0.1736%" height="15" fill="rgb(242,28,8)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="895.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="869" width="0.1736%" height="15" fill="rgb(219,106,18)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="879.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::Pattern&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="853" width="0.1736%" height="15" fill="rgb(244,222,10)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="863.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="837" width="0.1736%" height="15" fill="rgb(236,179,52)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="821" width="0.1736%" height="15" fill="rgb(213,23,39)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="805" width="0.1736%" height="15" fill="rgb(238,48,10)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="815.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::MatchPattern&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="789" width="0.1736%" height="15" fill="rgb(251,196,23)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="773" width="0.1736%" height="15" fill="rgb(250,152,24)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="757" width="0.1736%" height="15" fill="rgb(209,150,17)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="767.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::MatchPattern&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="741" width="0.1736%" height="15" fill="rgb(234,202,34)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="725" width="0.1736%" height="15" fill="rgb(253,148,53)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="709" width="0.1736%" height="15" fill="rgb(218,129,16)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11,666,224 samples, 0.17%)</title><rect x="3.3296%" y="693" width="0.1736%" height="15" fill="rgb(216,85,19)" fg:x="223705574" fg:w="11666224"/><text x="3.5796%" y="703.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::MatchOperation&gt;::deserialize (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="677" width="0.0663%" height="15" fill="rgb(235,228,7)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="661" width="0.0663%" height="15" fill="rgb(245,175,0)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="671.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::MatchOperation&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="645" width="0.0663%" height="15" fill="rgb(208,168,36)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="655.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="629" width="0.0663%" height="15" fill="rgb(246,171,24)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="613" width="0.0663%" height="15" fill="rgb(215,142,24)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="597" width="0.0663%" height="15" fill="rgb(250,187,7)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="581" width="0.0663%" height="15" fill="rgb(228,66,33)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="565" width="0.0663%" height="15" fill="rgb(234,215,21)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="575.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="549" width="0.0663%" height="15" fill="rgb(222,191,20)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="559.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="533" width="0.0663%" height="15" fill="rgb(245,79,54)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="543.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="517" width="0.0663%" height="15" fill="rgb(240,10,37)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="527.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="501" width="0.0663%" height="15" fill="rgb(214,192,32)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="511.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="485" width="0.0663%" height="15" fill="rgb(209,36,54)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="469" width="0.0663%" height="15" fill="rgb(220,10,11)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="479.50"></text></g><g><title>std::io::Read::read_exact (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="453" width="0.0663%" height="15" fill="rgb(221,106,17)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="463.50"></text></g><g><title>std::io::default_read_exact (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="437" width="0.0663%" height="15" fill="rgb(251,142,44)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="447.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="421" width="0.0663%" height="15" fill="rgb(238,13,15)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="431.50"></text></g><g><title>flate2::zio::read (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="405" width="0.0663%" height="15" fill="rgb(208,107,27)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="415.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="389" width="0.0663%" height="15" fill="rgb(205,136,37)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="399.50"></text></g><g><title>flate2::mem::Decompress::decompress (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="373" width="0.0663%" height="15" fill="rgb(250,205,27)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="383.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4,457,522 samples, 0.07%)</title><rect x="3.4369%" y="357" width="0.0663%" height="15" fill="rgb(210,80,43)" fg:x="230914276" fg:w="4457522"/><text x="3.6869%" y="367.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde::de::Visitor&gt;::visit_map (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1189" width="0.0539%" height="15" fill="rgb(247,160,36)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1199.50"></text></g><g><title>serde::de::MapAccess::next_entry (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1173" width="0.0539%" height="15" fill="rgb(234,13,49)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1183.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1157" width="0.0539%" height="15" fill="rgb(234,122,0)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1167.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map::Access&lt;R,O&gt; as serde::de::MapAccess&gt;::next_value_seed (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1141" width="0.0539%" height="15" fill="rgb(207,146,38)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1151.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1125" width="0.0539%" height="15" fill="rgb(207,177,25)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1135.50"></text></g><g><title>syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::ContextId&gt;::deserialize (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1109" width="0.0539%" height="15" fill="rgb(211,178,42)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1119.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1093" width="0.0539%" height="15" fill="rgb(230,69,54)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1103.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1077" width="0.0539%" height="15" fill="rgb(214,135,41)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1087.50"></text></g><g><title>&lt;syntect::parsing::syntax_definition::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_definition::ContextId&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1061" width="0.0539%" height="15" fill="rgb(237,67,25)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1071.50"></text></g><g><title>serde::de::SeqAccess::next_element (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1045" width="0.0539%" height="15" fill="rgb(222,189,50)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1055.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1029" width="0.0539%" height="15" fill="rgb(245,148,34)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1039.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="1013" width="0.0539%" height="15" fill="rgb(222,29,6)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1023.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for usize&gt;::deserialize (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="997" width="0.0539%" height="15" fill="rgb(221,189,43)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="1007.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="981" width="0.0539%" height="15" fill="rgb(207,36,27)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="991.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="965" width="0.0539%" height="15" fill="rgb(217,90,24)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="975.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="949" width="0.0539%" height="15" fill="rgb(224,66,35)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="959.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="933" width="0.0539%" height="15" fill="rgb(221,13,50)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="943.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="917" width="0.0539%" height="15" fill="rgb(236,68,49)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="927.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="901" width="0.0539%" height="15" fill="rgb(229,146,28)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="911.50"></text></g><g><title>std::io::Read::read_exact (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="885" width="0.0539%" height="15" fill="rgb(225,31,38)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="895.50"></text></g><g><title>std::io::default_read_exact (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="869" width="0.0539%" height="15" fill="rgb(250,208,3)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="879.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="853" width="0.0539%" height="15" fill="rgb(246,54,23)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="863.50"></text></g><g><title>flate2::zio::read (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="837" width="0.0539%" height="15" fill="rgb(243,76,11)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="847.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="821" width="0.0539%" height="15" fill="rgb(245,21,50)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="831.50"></text></g><g><title>flate2::mem::Decompress::decompress (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="805" width="0.0539%" height="15" fill="rgb(228,9,43)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="815.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (3,619,573 samples, 0.05%)</title><rect x="3.5032%" y="789" width="0.0539%" height="15" fill="rgb(208,100,47)" fg:x="235371798" fg:w="3619573"/><text x="3.7532%" y="799.50"></text></g><g><title>syntect::html::highlighted_html_for_string (174,866,738 samples, 2.60%)</title><rect x="1.0085%" y="1685" width="2.6027%" height="15" fill="rgb(232,26,8)" fg:x="67759200" fg:w="174866738"/><text x="1.2585%" y="1695.50">sy..</text></g><g><title>syntect::easy::HighlightLines::new (21,643,671 samples, 0.32%)</title><rect x="3.2890%" y="1669" width="0.3221%" height="15" fill="rgb(216,166,38)" fg:x="220982267" fg:w="21643671"/><text x="3.5390%" y="1679.50"></text></g><g><title>syntect::parsing::parser::ParseState::new (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1653" width="0.2816%" height="15" fill="rgb(251,202,51)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1663.50"></text></g><g><title>syntect::parsing::syntax_set::SyntaxReference::context_ids (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1637" width="0.2816%" height="15" fill="rgb(254,216,34)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1647.50"></text></g><g><title>syntect::parsing::syntax_set::SyntaxReference::lazy_contexts (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1621" width="0.2816%" height="15" fill="rgb(251,32,27)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1631.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1605" width="0.2816%" height="15" fill="rgb(208,127,28)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1615.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1589" width="0.2816%" height="15" fill="rgb(224,137,22)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1599.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1573" width="0.2816%" height="15" fill="rgb(254,70,32)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1583.50"></text></g><g><title>once_cell::imp::initialize_or_wait (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1557" width="0.2816%" height="15" fill="rgb(229,75,37)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1567.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1541" width="0.2816%" height="15" fill="rgb(252,64,23)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1551.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1525" width="0.2816%" height="15" fill="rgb(232,162,48)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1535.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1509" width="0.2816%" height="15" fill="rgb(246,160,12)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1519.50"></text></g><g><title>syntect::parsing::syntax_set::SyntaxReference::lazy_contexts::{{closure}} (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1493" width="0.2816%" height="15" fill="rgb(247,166,0)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1503.50"></text></g><g><title>syntect::parsing::syntax_set::LazyContexts::deserialize (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1477" width="0.2816%" height="15" fill="rgb(249,219,21)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1487.50"></text></g><g><title>syntect::dumps::from_reader (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1461" width="0.2816%" height="15" fill="rgb(205,209,3)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1471.50"></text></g><g><title>syntect::dumps::deserialize_from_reader_impl (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1445" width="0.2816%" height="15" fill="rgb(243,44,1)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1455.50"></text></g><g><title>bincode::deserialize_from (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1429" width="0.2816%" height="15" fill="rgb(206,159,16)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1439.50"></text></g><g><title>bincode::config::Options::deserialize_from (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1413" width="0.2816%" height="15" fill="rgb(244,77,30)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1423.50"></text></g><g><title>bincode::internal::deserialize_from (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1397" width="0.2816%" height="15" fill="rgb(218,69,12)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1407.50"></text></g><g><title>bincode::internal::deserialize_from_seed (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1381" width="0.2816%" height="15" fill="rgb(212,87,7)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1391.50"></text></g><g><title>bincode::internal::deserialize_from_custom_seed (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1365" width="0.2816%" height="15" fill="rgb(245,114,25)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1375.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1349" width="0.2816%" height="15" fill="rgb(210,61,42)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1359.50"></text></g><g><title>syntect::parsing::syntax_set::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_set::LazyContexts&gt;::deserialize (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1333" width="0.2816%" height="15" fill="rgb(211,52,33)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1343.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1317" width="0.2816%" height="15" fill="rgb(234,58,33)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1327.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1301" width="0.2816%" height="15" fill="rgb(220,115,36)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1311.50"></text></g><g><title>&lt;syntect::parsing::syntax_set::_::&lt;impl serde::de::Deserialize for syntect::parsing::syntax_set::LazyContexts&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1285" width="0.2816%" height="15" fill="rgb(243,153,54)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1295.50"></text></g><g><title>serde::de::SeqAccess::next_element (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1269" width="0.2816%" height="15" fill="rgb(251,47,18)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1279.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1253" width="0.2816%" height="15" fill="rgb(242,102,42)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1263.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18,920,364 samples, 0.28%)</title><rect x="3.3296%" y="1237" width="0.2816%" height="15" fill="rgb(234,31,38)" fg:x="223705574" fg:w="18920364"/><text x="3.5796%" y="1247.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (7,254,140 samples, 0.11%)</title><rect x="3.5032%" y="1221" width="0.1080%" height="15" fill="rgb(221,117,51)" fg:x="235371798" fg:w="7254140"/><text x="3.7532%" y="1231.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_map (7,254,140 samples, 0.11%)</title><rect x="3.5032%" y="1205" width="0.1080%" height="15" fill="rgb(212,20,18)" fg:x="235371798" fg:w="7254140"/><text x="3.7532%" y="1215.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1189" width="0.0541%" height="15" fill="rgb(245,133,36)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1199.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1173" width="0.0541%" height="15" fill="rgb(212,6,19)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1183.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1157" width="0.0541%" height="15" fill="rgb(218,1,36)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1167.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1141" width="0.0541%" height="15" fill="rgb(246,84,54)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1151.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1125" width="0.0541%" height="15" fill="rgb(242,110,6)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1135.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1109" width="0.0541%" height="15" fill="rgb(214,47,5)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1119.50"></text></g><g><title>std::io::Read::read_exact (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1093" width="0.0541%" height="15" fill="rgb(218,159,25)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1103.50"></text></g><g><title>std::io::default_read_exact (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1077" width="0.0541%" height="15" fill="rgb(215,211,28)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1087.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1061" width="0.0541%" height="15" fill="rgb(238,59,32)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1071.50"></text></g><g><title>flate2::zio::read (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1045" width="0.0541%" height="15" fill="rgb(226,82,3)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1055.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1029" width="0.0541%" height="15" fill="rgb(240,164,32)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1039.50"></text></g><g><title>flate2::mem::Decompress::decompress (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="1013" width="0.0541%" height="15" fill="rgb(232,46,7)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1023.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="997" width="0.0541%" height="15" fill="rgb(229,129,53)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="1007.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="981" width="0.0541%" height="15" fill="rgb(234,188,29)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="991.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="965" width="0.0541%" height="15" fill="rgb(246,141,4)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="975.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="949" width="0.0541%" height="15" fill="rgb(229,23,39)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="959.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="933" width="0.0541%" height="15" fill="rgb(206,12,3)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="943.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (3,634,567 samples, 0.05%)</title><rect x="3.5571%" y="917" width="0.0541%" height="15" fill="rgb(252,226,20)" fg:x="238991371" fg:w="3634567"/><text x="3.8071%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1493" width="0.0518%" height="15" fill="rgb(216,123,35)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1503.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1477" width="0.0518%" height="15" fill="rgb(212,68,40)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1487.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1461" width="0.0518%" height="15" fill="rgb(254,125,32)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1471.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1445" width="0.0518%" height="15" fill="rgb(253,97,22)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1429" width="0.0518%" height="15" fill="rgb(241,101,14)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1413" width="0.0518%" height="15" fill="rgb(238,103,29)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1397" width="0.0518%" height="15" fill="rgb(233,195,47)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1381" width="0.0518%" height="15" fill="rgb(246,218,30)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1391.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1365" width="0.0518%" height="15" fill="rgb(219,145,47)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1375.50"></text></g><g><title>alloc::alloc::alloc (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1349" width="0.0518%" height="15" fill="rgb(243,12,26)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1359.50"></text></g><g><title>malloc (3,480,787 samples, 0.05%)</title><rect x="3.6591%" y="1333" width="0.0518%" height="15" fill="rgb(214,87,16)" fg:x="245846462" fg:w="3480787"/><text x="3.9091%" y="1343.50"></text></g><g><title>html5ever::tokenizer::Tokenizer&lt;Sink&gt;::emit_current_tag (3,982,291 samples, 0.06%)</title><rect x="3.6591%" y="1605" width="0.0593%" height="15" fill="rgb(208,99,42)" fg:x="245846462" fg:w="3982291"/><text x="3.9091%" y="1615.50"></text></g><g><title>html5ever::tokenizer::Tokenizer&lt;Sink&gt;::process_token (3,982,291 samples, 0.06%)</title><rect x="3.6591%" y="1589" width="0.0593%" height="15" fill="rgb(253,99,2)" fg:x="245846462" fg:w="3982291"/><text x="3.9091%" y="1599.50"></text></g><g><title>&lt;html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt; as html5ever::tokenizer::interface::TokenSink&gt;::process_token (3,982,291 samples, 0.06%)</title><rect x="3.6591%" y="1573" width="0.0593%" height="15" fill="rgb(220,168,23)" fg:x="245846462" fg:w="3982291"/><text x="3.9091%" y="1583.50"></text></g><g><title>html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::process_to_completion (3,982,291 samples, 0.06%)</title><rect x="3.6591%" y="1557" width="0.0593%" height="15" fill="rgb(242,38,24)" fg:x="245846462" fg:w="3982291"/><text x="3.9091%" y="1567.50"></text></g><g><title>html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::step (3,982,291 samples, 0.06%)</title><rect x="3.6591%" y="1541" width="0.0593%" height="15" fill="rgb(225,182,9)" fg:x="245846462" fg:w="3982291"/><text x="3.9091%" y="1551.50"></text></g><g><title>html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_element_for (3,982,291 samples, 0.06%)</title><rect x="3.6591%" y="1525" width="0.0593%" height="15" fill="rgb(243,178,37)" fg:x="245846462" fg:w="3982291"/><text x="3.9091%" y="1535.50"></text></g><g><title>html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::insert_element (3,982,291 samples, 0.06%)</title><rect x="3.6591%" y="1509" width="0.0593%" height="15" fill="rgb(232,139,19)" fg:x="245846462" fg:w="3982291"/><text x="3.9091%" y="1519.50"></text></g><g><title>_start (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1973" width="3.7254%" height="15" fill="rgb(225,201,24)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1983.50">_sta..</text></g><g><title>__libc_start_main (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1957" width="3.7254%" height="15" fill="rgb(221,47,46)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1967.50">__li..</text></g><g><title>[libc.so.6] (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1941" width="3.7254%" height="15" fill="rgb(249,23,13)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1951.50">[lib..</text></g><g><title>main (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1925" width="3.7254%" height="15" fill="rgb(219,9,5)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1935.50">main</text></g><g><title>std::rt::lang_start_internal (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1909" width="3.7254%" height="15" fill="rgb(254,171,16)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1919.50">std:..</text></g><g><title>std::panic::catch_unwind (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1893" width="3.7254%" height="15" fill="rgb(230,171,20)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1903.50">std:..</text></g><g><title>std::panicking::try (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1877" width="3.7254%" height="15" fill="rgb(210,71,41)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1887.50">std:..</text></g><g><title>std::panicking::try::do_call (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1861" width="3.7254%" height="15" fill="rgb(206,173,20)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1871.50">std:..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1845" width="3.7254%" height="15" fill="rgb(233,88,34)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1855.50">std:..</text></g><g><title>std::panic::catch_unwind (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1829" width="3.7254%" height="15" fill="rgb(223,209,46)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1839.50">std:..</text></g><g><title>std::panicking::try (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1813" width="3.7254%" height="15" fill="rgb(250,43,18)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1823.50">std:..</text></g><g><title>std::panicking::try::do_call (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1797" width="3.7254%" height="15" fill="rgb(208,13,10)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1807.50">std:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1781" width="3.7254%" height="15" fill="rgb(212,200,36)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1791.50">core..</text></g><g><title>std::rt::lang_start::{{closure}} (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1765" width="3.7254%" height="15" fill="rgb(225,90,30)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1775.50">std:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1749" width="3.7254%" height="15" fill="rgb(236,182,39)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1759.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1733" width="3.7254%" height="15" fill="rgb(212,144,35)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1743.50">core..</text></g><g><title>editorial::main (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1717" width="3.7254%" height="15" fill="rgb(228,63,44)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1727.50">edit..</text></g><g><title>editorial::structs::Article::create_template (250,303,697 samples, 3.73%)</title><rect x="0.0067%" y="1701" width="3.7254%" height="15" fill="rgb(228,109,6)" fg:x="453149" fg:w="250303697"/><text x="0.2567%" y="1711.50">edit..</text></g><g><title>tendril::stream::TendrilSink::one (8,130,908 samples, 0.12%)</title><rect x="3.6112%" y="1685" width="0.1210%" height="15" fill="rgb(238,117,24)" fg:x="242625938" fg:w="8130908"/><text x="3.8612%" y="1695.50"></text></g><g><title>&lt;html5ever::driver::Parser&lt;Sink&gt; as tendril::stream::TendrilSink&lt;tendril::fmt::UTF8&gt;&gt;::process (8,130,908 samples, 0.12%)</title><rect x="3.6112%" y="1669" width="0.1210%" height="15" fill="rgb(242,26,26)" fg:x="242625938" fg:w="8130908"/><text x="3.8612%" y="1679.50"></text></g><g><title>html5ever::tokenizer::Tokenizer&lt;Sink&gt;::feed (8,130,908 samples, 0.12%)</title><rect x="3.6112%" y="1653" width="0.1210%" height="15" fill="rgb(221,92,48)" fg:x="242625938" fg:w="8130908"/><text x="3.8612%" y="1663.50"></text></g><g><title>html5ever::tokenizer::Tokenizer&lt;Sink&gt;::run (8,130,908 samples, 0.12%)</title><rect x="3.6112%" y="1637" width="0.1210%" height="15" fill="rgb(209,209,32)" fg:x="242625938" fg:w="8130908"/><text x="3.8612%" y="1647.50"></text></g><g><title>html5ever::tokenizer::Tokenizer&lt;Sink&gt;::step (8,130,908 samples, 0.12%)</title><rect x="3.6112%" y="1621" width="0.1210%" height="15" fill="rgb(221,70,22)" fg:x="242625938" fg:w="8130908"/><text x="3.8612%" y="1631.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3,236,602 samples, 0.05%)</title><rect x="3.7322%" y="1973" width="0.0482%" height="15" fill="rgb(248,145,5)" fg:x="250756846" fg:w="3236602"/><text x="3.9822%" y="1983.50"></text></g><g><title>editorial (258,421,327 samples, 3.85%)</title><rect x="0.0000%" y="1989" width="3.8463%" height="15" fill="rgb(226,116,26)" fg:x="0" fg:w="258421327"/><text x="0.2500%" y="1999.50">edit..</text></g><g><title>html5ever::tree_builder::TreeBuilder&lt;Handle,Sink&gt;::process_end_tag_in_body (4,001,290 samples, 0.06%)</title><rect x="3.7867%" y="1973" width="0.0596%" height="15" fill="rgb(244,5,17)" fg:x="254420037" fg:w="4001290"/><text x="4.0367%" y="1983.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5,170,662,118 samples, 76.96%)</title><rect x="4.0621%" y="1893" width="76.9585%" height="15" fill="rgb(252,159,33)" fg:x="272924698" fg:w="5170662118"/><text x="4.3121%" y="1903.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (5,001,307,015 samples, 74.44%)</title><rect x="6.5827%" y="1877" width="74.4378%" height="15" fill="rgb(206,71,0)" fg:x="442279801" fg:w="5001307015"/><text x="6.8327%" y="1887.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (4,904,456,565 samples, 73.00%)</title><rect x="8.0242%" y="1861" width="72.9963%" height="15" fill="rgb(233,118,54)" fg:x="539130251" fg:w="4904456565"/><text x="8.2742%" y="1871.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (153,059,922 samples, 2.28%)</title><rect x="78.7425%" y="1845" width="2.2781%" height="15" fill="rgb(234,83,48)" fg:x="5290526894" fg:w="153059922"/><text x="78.9925%" y="1855.50">[..</text></g><g><title>[ld-linux-x86-64.so.2] (79,399,183 samples, 1.18%)</title><rect x="79.8388%" y="1829" width="1.1818%" height="15" fill="rgb(228,3,54)" fg:x="5364187633" fg:w="79399183"/><text x="80.0888%" y="1839.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6,278,168,644 samples, 93.44%)</title><rect x="3.8463%" y="1973" width="93.4422%" height="15" fill="rgb(226,155,13)" fg:x="258421327" fg:w="6278168644"/><text x="4.0963%" y="1983.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (6,267,113,332 samples, 93.28%)</title><rect x="4.0108%" y="1957" width="93.2777%" height="15" fill="rgb(241,28,37)" fg:x="269476639" fg:w="6267113332"/><text x="4.2608%" y="1967.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (6,267,113,332 samples, 93.28%)</title><rect x="4.0108%" y="1941" width="93.2777%" height="15" fill="rgb(233,93,10)" fg:x="269476639" fg:w="6267113332"/><text x="4.2608%" y="1951.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (6,267,113,332 samples, 93.28%)</title><rect x="4.0108%" y="1925" width="93.2777%" height="15" fill="rgb(225,113,19)" fg:x="269476639" fg:w="6267113332"/><text x="4.2608%" y="1935.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (6,267,113,332 samples, 93.28%)</title><rect x="4.0108%" y="1909" width="93.2777%" height="15" fill="rgb(241,2,18)" fg:x="269476639" fg:w="6267113332"/><text x="4.2608%" y="1919.50">[ld-linux-x86-64.so.2]</text></g><g><title>_dl_catch_exception (1,093,003,155 samples, 16.27%)</title><rect x="81.0206%" y="1893" width="16.2679%" height="15" fill="rgb(228,207,21)" fg:x="5443586816" fg:w="1093003155"/><text x="81.2706%" y="1903.50">_dl_catch_exception</text></g><g><title>[ld-linux-x86-64.so.2] (1,093,003,155 samples, 16.27%)</title><rect x="81.0206%" y="1877" width="16.2679%" height="15" fill="rgb(213,211,35)" fg:x="5443586816" fg:w="1093003155"/><text x="81.2706%" y="1887.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (1,085,883,681 samples, 16.16%)</title><rect x="81.1265%" y="1861" width="16.1619%" height="15" fill="rgb(209,83,10)" fg:x="5450706290" fg:w="1085883681"/><text x="81.3765%" y="1871.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (1,084,970,722 samples, 16.15%)</title><rect x="81.1401%" y="1845" width="16.1484%" height="15" fill="rgb(209,164,1)" fg:x="5451619249" fg:w="1084970722"/><text x="81.3901%" y="1855.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (931,605,974 samples, 13.87%)</title><rect x="83.4228%" y="1829" width="13.8657%" height="15" fill="rgb(213,184,43)" fg:x="5604983997" fg:w="931605974"/><text x="83.6728%" y="1839.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (250,703,498 samples, 3.73%)</title><rect x="93.5571%" y="1813" width="3.7314%" height="15" fill="rgb(231,61,34)" fg:x="6285886473" fg:w="250703498"/><text x="93.8071%" y="1823.50">[ld-..</text></g><g><title>[libHSbase-4.17.2.1-ghc9.4.8.so] (7,948,915 samples, 0.12%)</title><rect x="97.2885%" y="1973" width="0.1183%" height="15" fill="rgb(235,75,3)" fg:x="6536589971" fg:w="7948915"/><text x="97.5385%" y="1983.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,332,352 samples, 0.06%)</title><rect x="97.3423%" y="1957" width="0.0645%" height="15" fill="rgb(220,106,47)" fg:x="6540206534" fg:w="4332352"/><text x="97.5923%" y="1967.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,332,352 samples, 0.06%)</title><rect x="97.3423%" y="1941" width="0.0645%" height="15" fill="rgb(210,196,33)" fg:x="6540206534" fg:w="4332352"/><text x="97.5923%" y="1951.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,332,352 samples, 0.06%)</title><rect x="97.3423%" y="1925" width="0.0645%" height="15" fill="rgb(229,154,42)" fg:x="6540206534" fg:w="4332352"/><text x="97.5923%" y="1935.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,332,352 samples, 0.06%)</title><rect x="97.3423%" y="1909" width="0.0645%" height="15" fill="rgb(228,114,26)" fg:x="6540206534" fg:w="4332352"/><text x="97.5923%" y="1919.50"></text></g><g><title>[libHScontainers-0.6.7-ghc9.4.8.so] (3,672,328 samples, 0.05%)</title><rect x="97.4068%" y="1973" width="0.0547%" height="15" fill="rgb(208,144,1)" fg:x="6544538886" fg:w="3672328"/><text x="97.6568%" y="1983.50"></text></g><g><title>[libHSdoclayout-0.4.0.1-9E6SUVIGrA72EmthT6YScZ-ghc9.4.8.so] (3,705,471 samples, 0.06%)</title><rect x="97.4615%" y="1973" width="0.0552%" height="15" fill="rgb(239,112,37)" fg:x="6548211214" fg:w="3705471"/><text x="97.7115%" y="1983.50"></text></g><g><title>[libHSpandoc-3.3-HriYFbb04XHLXFywC5SNco-ghc9.4.8.so] (18,807,105 samples, 0.28%)</title><rect x="97.5166%" y="1973" width="0.2799%" height="15" fill="rgb(210,96,50)" fg:x="6551916685" fg:w="18807105"/><text x="97.7666%" y="1983.50"></text></g><g><title>[libHSparsec-3.1.16.1-ghc9.4.8.so] (3,295,385 samples, 0.05%)</title><rect x="97.7965%" y="1973" width="0.0490%" height="15" fill="rgb(222,178,2)" fg:x="6570723790" fg:w="3295385"/><text x="98.0465%" y="1983.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,451,247 samples, 0.07%)</title><rect x="97.8456%" y="1861" width="0.0663%" height="15" fill="rgb(226,74,18)" fg:x="6574019175" fg:w="4451247"/><text x="98.0956%" y="1871.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,451,247 samples, 0.07%)</title><rect x="97.8456%" y="1845" width="0.0663%" height="15" fill="rgb(225,67,54)" fg:x="6574019175" fg:w="4451247"/><text x="98.0956%" y="1855.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,451,247 samples, 0.07%)</title><rect x="97.8456%" y="1829" width="0.0663%" height="15" fill="rgb(251,92,32)" fg:x="6574019175" fg:w="4451247"/><text x="98.0956%" y="1839.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,451,247 samples, 0.07%)</title><rect x="97.8456%" y="1813" width="0.0663%" height="15" fill="rgb(228,149,22)" fg:x="6574019175" fg:w="4451247"/><text x="98.0956%" y="1823.50"></text></g><g><title>initMBlocks (4,410,731 samples, 0.07%)</title><rect x="97.9118%" y="1861" width="0.0656%" height="15" fill="rgb(243,54,13)" fg:x="6578470422" fg:w="4410731"/><text x="98.1618%" y="1871.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (4,410,731 samples, 0.07%)</title><rect x="97.9118%" y="1845" width="0.0656%" height="15" fill="rgb(243,180,28)" fg:x="6578470422" fg:w="4410731"/><text x="98.1618%" y="1855.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (4,410,731 samples, 0.07%)</title><rect x="97.9118%" y="1829" width="0.0656%" height="15" fill="rgb(208,167,24)" fg:x="6578470422" fg:w="4410731"/><text x="98.1618%" y="1839.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,410,731 samples, 0.07%)</title><rect x="97.9118%" y="1813" width="0.0656%" height="15" fill="rgb(245,73,45)" fg:x="6578470422" fg:w="4410731"/><text x="98.1618%" y="1823.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,410,731 samples, 0.07%)</title><rect x="97.9118%" y="1797" width="0.0656%" height="15" fill="rgb(237,203,48)" fg:x="6578470422" fg:w="4410731"/><text x="98.1618%" y="1807.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,410,731 samples, 0.07%)</title><rect x="97.9118%" y="1781" width="0.0656%" height="15" fill="rgb(211,197,16)" fg:x="6578470422" fg:w="4410731"/><text x="98.1618%" y="1791.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,410,731 samples, 0.07%)</title><rect x="97.9118%" y="1765" width="0.0656%" height="15" fill="rgb(243,99,51)" fg:x="6578470422" fg:w="4410731"/><text x="98.1618%" y="1775.50"></text></g><g><title>hs_init_ghc (13,347,356 samples, 0.20%)</title><rect x="97.8456%" y="1893" width="0.1987%" height="15" fill="rgb(215,123,29)" fg:x="6574019175" fg:w="13347356"/><text x="98.0956%" y="1903.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (13,347,356 samples, 0.20%)</title><rect x="97.8456%" y="1877" width="0.1987%" height="15" fill="rgb(239,186,37)" fg:x="6574019175" fg:w="13347356"/><text x="98.0956%" y="1887.50"></text></g><g><title>scheduleWaitThread (4,485,378 samples, 0.07%)</title><rect x="97.9775%" y="1861" width="0.0668%" height="15" fill="rgb(252,136,39)" fg:x="6582881153" fg:w="4485378"/><text x="98.2275%" y="1871.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (4,485,378 samples, 0.07%)</title><rect x="97.9775%" y="1845" width="0.0668%" height="15" fill="rgb(223,213,32)" fg:x="6582881153" fg:w="4485378"/><text x="98.2275%" y="1855.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (4,485,378 samples, 0.07%)</title><rect x="97.9775%" y="1829" width="0.0668%" height="15" fill="rgb(233,115,5)" fg:x="6582881153" fg:w="4485378"/><text x="98.2275%" y="1839.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,485,378 samples, 0.07%)</title><rect x="97.9775%" y="1813" width="0.0668%" height="15" fill="rgb(207,226,44)" fg:x="6582881153" fg:w="4485378"/><text x="98.2275%" y="1823.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,485,378 samples, 0.07%)</title><rect x="97.9775%" y="1797" width="0.0668%" height="15" fill="rgb(208,126,0)" fg:x="6582881153" fg:w="4485378"/><text x="98.2275%" y="1807.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,485,378 samples, 0.07%)</title><rect x="97.9775%" y="1781" width="0.0668%" height="15" fill="rgb(244,66,21)" fg:x="6582881153" fg:w="4485378"/><text x="98.2275%" y="1791.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,485,378 samples, 0.07%)</title><rect x="97.9775%" y="1765" width="0.0668%" height="15" fill="rgb(222,97,12)" fg:x="6582881153" fg:w="4485378"/><text x="98.2275%" y="1775.50"></text></g><g><title>scheduleWaitThread (39,590,048 samples, 0.59%)</title><rect x="98.0442%" y="1893" width="0.5892%" height="15" fill="rgb(219,213,19)" fg:x="6587366531" fg:w="39590048"/><text x="98.2942%" y="1903.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (39,590,048 samples, 0.59%)</title><rect x="98.0442%" y="1877" width="0.5892%" height="15" fill="rgb(252,169,30)" fg:x="6587366531" fg:w="39590048"/><text x="98.2942%" y="1887.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (39,590,048 samples, 0.59%)</title><rect x="98.0442%" y="1861" width="0.5892%" height="15" fill="rgb(206,32,51)" fg:x="6587366531" fg:w="39590048"/><text x="98.2942%" y="1871.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (39,590,048 samples, 0.59%)</title><rect x="98.0442%" y="1845" width="0.5892%" height="15" fill="rgb(250,172,42)" fg:x="6587366531" fg:w="39590048"/><text x="98.2942%" y="1855.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (39,590,048 samples, 0.59%)</title><rect x="98.0442%" y="1829" width="0.5892%" height="15" fill="rgb(209,34,43)" fg:x="6587366531" fg:w="39590048"/><text x="98.2942%" y="1839.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (39,590,048 samples, 0.59%)</title><rect x="98.0442%" y="1813" width="0.5892%" height="15" fill="rgb(223,11,35)" fg:x="6587366531" fg:w="39590048"/><text x="98.2942%" y="1823.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (32,315,853 samples, 0.48%)</title><rect x="98.1525%" y="1797" width="0.4810%" height="15" fill="rgb(251,219,26)" fg:x="6594640726" fg:w="32315853"/><text x="98.4025%" y="1807.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (7,007,530 samples, 0.10%)</title><rect x="98.5292%" y="1781" width="0.1043%" height="15" fill="rgb(231,119,3)" fg:x="6619949049" fg:w="7007530"/><text x="98.7792%" y="1791.50"></text></g><g><title>_start (56,554,204 samples, 0.84%)</title><rect x="97.8456%" y="1973" width="0.8417%" height="15" fill="rgb(216,97,11)" fg:x="6574019175" fg:w="56554204"/><text x="98.0956%" y="1983.50"></text></g><g><title>__libc_start_main (56,554,204 samples, 0.84%)</title><rect x="97.8456%" y="1957" width="0.8417%" height="15" fill="rgb(223,59,9)" fg:x="6574019175" fg:w="56554204"/><text x="98.0956%" y="1967.50"></text></g><g><title>[libc.so.6] (56,554,204 samples, 0.84%)</title><rect x="97.8456%" y="1941" width="0.8417%" height="15" fill="rgb(233,93,31)" fg:x="6574019175" fg:w="56554204"/><text x="98.0956%" y="1951.50"></text></g><g><title>main (56,554,204 samples, 0.84%)</title><rect x="97.8456%" y="1925" width="0.8417%" height="15" fill="rgb(239,81,33)" fg:x="6574019175" fg:w="56554204"/><text x="98.0956%" y="1935.50"></text></g><g><title>hs_main (56,554,204 samples, 0.84%)</title><rect x="97.8456%" y="1909" width="0.8417%" height="15" fill="rgb(213,120,34)" fg:x="6574019175" fg:w="56554204"/><text x="98.0956%" y="1919.50"></text></g><g><title>shutdownHaskellAndExit (3,616,800 samples, 0.05%)</title><rect x="98.6335%" y="1893" width="0.0538%" height="15" fill="rgb(243,49,53)" fg:x="6626956579" fg:w="3616800"/><text x="98.8835%" y="1903.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (3,616,800 samples, 0.05%)</title><rect x="98.6335%" y="1877" width="0.0538%" height="15" fill="rgb(247,216,33)" fg:x="6626956579" fg:w="3616800"/><text x="98.8835%" y="1887.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (3,616,800 samples, 0.05%)</title><rect x="98.6335%" y="1861" width="0.0538%" height="15" fill="rgb(226,26,14)" fg:x="6626956579" fg:w="3616800"/><text x="98.8835%" y="1871.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (3,616,800 samples, 0.05%)</title><rect x="98.6335%" y="1845" width="0.0538%" height="15" fill="rgb(215,49,53)" fg:x="6626956579" fg:w="3616800"/><text x="98.8835%" y="1855.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (3,616,800 samples, 0.05%)</title><rect x="98.6335%" y="1829" width="0.0538%" height="15" fill="rgb(245,162,40)" fg:x="6626956579" fg:w="3616800"/><text x="98.8835%" y="1839.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (3,616,800 samples, 0.05%)</title><rect x="98.6335%" y="1813" width="0.0538%" height="15" fill="rgb(229,68,17)" fg:x="6626956579" fg:w="3616800"/><text x="98.8835%" y="1823.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (3,616,800 samples, 0.05%)</title><rect x="98.6335%" y="1797" width="0.0538%" height="15" fill="rgb(213,182,10)" fg:x="6626956579" fg:w="3616800"/><text x="98.8835%" y="1807.50"></text></g><g><title>[libHSrts-1.0.2_thr-ghc9.4.8.so] (3,616,800 samples, 0.05%)</title><rect x="98.6335%" y="1781" width="0.0538%" height="15" fill="rgb(245,125,30)" fg:x="6626956579" fg:w="3616800"/><text x="98.8835%" y="1791.50"></text></g><g><title>aesonzm2zi1zi2zi1zm25X5lEqka86CxkXK2BMN9E_DataziAesonziKeyMap_zdwzdsgo5_info (3,975,654 samples, 0.06%)</title><rect x="98.6873%" y="1973" width="0.0592%" height="15" fill="rgb(232,202,2)" fg:x="6630573379" fg:w="3975654"/><text x="98.9373%" y="1983.50"></text></g><g><title>base_GHCziIOziFD_zdfBufferedIOFD15_info (4,424,084 samples, 0.07%)</title><rect x="98.7465%" y="1973" width="0.0658%" height="15" fill="rgb(237,140,51)" fg:x="6634549033" fg:w="4424084"/><text x="98.9965%" y="1983.50"></text></g><g><title>base_TextziParserCombinatorsziReadP_run_info (3,570,980 samples, 0.05%)</title><rect x="98.8123%" y="1973" width="0.0531%" height="15" fill="rgb(236,157,25)" fg:x="6638973117" fg:w="3570980"/><text x="99.0623%" y="1983.50"></text></g><g><title>containerszm0zi6zi7_DataziSequenceziInternal_zdfAlternativeSeq3_info (3,589,137 samples, 0.05%)</title><rect x="98.8655%" y="1973" width="0.0534%" height="15" fill="rgb(219,209,0)" fg:x="6642544097" fg:w="3589137"/><text x="99.1155%" y="1983.50"></text></g><g><title>doclayoutzm0zi4zi0zi1zm9E6SUVIGrA72EmthT6YScZZ_TextziDocLayout_repack_info (3,653,410 samples, 0.05%)</title><rect x="98.9189%" y="1973" width="0.0544%" height="15" fill="rgb(240,116,54)" fg:x="6646133234" fg:w="3653410"/><text x="99.1689%" y="1983.50"></text></g><g><title>doclayoutzm0zi4zi0zi1zm9E6SUVIGrA72EmthT6YScZZ_TextziDocLayout_updateMatchStateNarrow_info (3,658,192 samples, 0.05%)</title><rect x="98.9733%" y="1973" width="0.0544%" height="15" fill="rgb(216,10,36)" fg:x="6649786644" fg:w="3658192"/><text x="99.2233%" y="1983.50"></text></g><g><title>ghczmprim_GHCziClasses_zdfOrdZMZNzuzdszdccompare1_info (7,753,105 samples, 0.12%)</title><rect x="99.0277%" y="1973" width="0.1154%" height="15" fill="rgb(222,72,44)" fg:x="6653444836" fg:w="7753105"/><text x="99.2777%" y="1983.50"></text></g><g><title>pandoczm3zi3zmHriYFbb04XHLXFywC5SNco_TextziPandocziParsingziGeneral_anyLine1_info (4,212,836 samples, 0.06%)</title><rect x="99.1431%" y="1973" width="0.0627%" height="15" fill="rgb(232,159,9)" fg:x="6661197941" fg:w="4212836"/><text x="99.3931%" y="1983.50"></text></g><g><title>pandoczm3zi3zmHriYFbb04XHLXFywC5SNco_TextziPandocziSources_zdfStreamSourcesmCharzuzdcuncons_info (3,766,675 samples, 0.06%)</title><rect x="99.2058%" y="1973" width="0.0561%" height="15" fill="rgb(210,39,32)" fg:x="6665410777" fg:w="3766675"/><text x="99.4558%" y="1983.50"></text></g><g><title>pandoczm3zi3zmHriYFbb04XHLXFywC5SNco_TextziPandocziSources_zdwzdcuncons_info (8,072,828 samples, 0.12%)</title><rect x="99.2619%" y="1973" width="0.1202%" height="15" fill="rgb(216,194,45)" fg:x="6669177452" fg:w="8072828"/><text x="99.5119%" y="1983.50"></text></g><g><title>stg_PAP_apply (11,576,467 samples, 0.17%)</title><rect x="99.3820%" y="1973" width="0.1723%" height="15" fill="rgb(218,18,35)" fg:x="6677250280" fg:w="11576467"/><text x="99.6320%" y="1983.50"></text></g><g><title>stg_ap_p_fast (3,548,196 samples, 0.05%)</title><rect x="99.5543%" y="1973" width="0.0528%" height="15" fill="rgb(207,83,51)" fg:x="6688826747" fg:w="3548196"/><text x="99.8043%" y="1983.50"></text></g><g><title>stg_ap_pp_fast (3,593,170 samples, 0.05%)</title><rect x="99.6071%" y="1973" width="0.0535%" height="15" fill="rgb(225,63,43)" fg:x="6692374943" fg:w="3593170"/><text x="99.8571%" y="1983.50"></text></g><g><title>stg_ap_ppppp_info (3,897,458 samples, 0.06%)</title><rect x="99.6606%" y="1973" width="0.0580%" height="15" fill="rgb(207,57,36)" fg:x="6695968113" fg:w="3897458"/><text x="99.9106%" y="1983.50"></text></g><g><title>stg_ap_pv_info (7,518,973 samples, 0.11%)</title><rect x="99.7186%" y="1973" width="0.1119%" height="15" fill="rgb(216,99,33)" fg:x="6699865571" fg:w="7518973"/><text x="99.9686%" y="1983.50"></text></g><g><title>stg_upd_frame_info (3,639,257 samples, 0.05%)</title><rect x="99.8305%" y="1973" width="0.0542%" height="15" fill="rgb(225,42,16)" fg:x="6707384544" fg:w="3639257"/><text x="100.0805%" y="1983.50"></text></g><g><title>textzm2zi0zi2_DataziText_concat_info (3,575,806 samples, 0.05%)</title><rect x="99.8847%" y="1973" width="0.0532%" height="15" fill="rgb(220,201,45)" fg:x="6711023801" fg:w="3575806"/><text x="100.1347%" y="1983.50"></text></g><g><title>all (6,718,770,533 samples, 100%)</title><rect x="0.0000%" y="2005" width="100.0000%" height="15" fill="rgb(225,33,4)" fg:x="0" fg:w="6718770533"/><text x="0.2500%" y="2015.50"></text></g><g><title>pandoc (6,460,349,206 samples, 96.15%)</title><rect x="3.8463%" y="1989" width="96.1537%" height="15" fill="rgb(224,33,50)" fg:x="258421327" fg:w="6460349206"/><text x="4.0963%" y="1999.50">pandoc</text></g><g><title>textzm2zi0zi2_DataziTextziInternal_zdwouter_info (4,170,926 samples, 0.06%)</title><rect x="99.9379%" y="1973" width="0.0621%" height="15" fill="rgb(246,198,51)" fg:x="6714599607" fg:w="4170926"/><text x="100.1879%" y="1983.50"></text></g></svg></svg>