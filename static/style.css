/*! tailwindcss v4.0.17 | MIT License | https://tailwindcss.com */
@import url('https://fonts.googleapis.com/css2?family=Baskervville+SC&display=swap');
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}
.relative {
  position: relative;
}
.z-50 {
  z-index: 50;
}
.container {
  width: 100%;
}
.mx-auto {
  margin-inline: auto;
}
.mt-\[7vh\] {
  margin-top: 7vh;
}
.mt-\[10vh\] {
  margin-top: 10vh;
}
.block {
  display: block;
}
.contents {
  display: contents;
}
.flex {
  display: flex;
}
.h-full {
  height: 100%;
}
.min-h-screen {
  min-height: 100vh;
}
.w-1\/3 {
  width: calc(1/3 * 100%);
}
.w-2\/3 {
  width: calc(2/3 * 100%);
}
.w-full {
  width: 100%;
}
.max-w-\[800px\] {
  max-width: 800px;
}
.max-w-\[1200px\] {
  max-width: 1200px;
}
.max-w-none {
  max-width: none;
}
.flex-1 {
  flex: 1;
}
.-translate-y-full {
  --tw-translate-y: -100%;
  translate: var(--tw-translate-x) var(--tw-translate-y);
}
.transform {
  transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);
}
.flex-col {
  flex-direction: column;
}
.flex-row {
  flex-direction: row;
}
.items-start {
  align-items: flex-start;
}
.justify-around {
  justify-content: space-around;
}
.justify-center {
  justify-content: center;
}
.overflow-hidden {
  overflow: hidden;
}
.border-t {
  border-top-style: var(--tw-border-style);
  border-top-width: 1px;
}
.border-b {
  border-bottom-style: var(--tw-border-style);
  border-bottom-width: 1px;
}
.bg-\[\#111111\] {
  background-color: #111111;
}
.bg-\[\#303030\] {
  background-color: #303030;
}
.fill-current {
  fill: currentColor;
}
.pt-\[7vh\] {
  padding-top: 7vh;
}
.pt-\[10vh\] {
  padding-top: 10vh;
}
.text-center {
  text-align: center;
}
.text-\[1\.2em\] {
  font-size: 1.2em;
}
.text-\[1\.2rem\] {
  font-size: 1.2rem;
}
.text-\[2\.5em\] {
  font-size: 2.5em;
}
.text-\[\#800000\] {
  color: #800000;
}
.italic {
  font-style: italic;
}
.transition-all {
  transition-property: all;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.transition-colors {
  transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.transition-transform {
  transition-property: transform, translate, scale, rotate;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.duration-300 {
  --tw-duration: 300ms;
  transition-duration: 300ms;
}
.duration-500 {
  --tw-duration: 500ms;
  transition-duration: 500ms;
}
.duration-600 {
  --tw-duration: 600ms;
  transition-duration: 600ms;
}
.group-hover\:text-\[\#800000\] {
  &:is(:where(.group):hover *) {
    @media (hover: hover) {
      color: #800000;
    }
  }
}
.first-letter\:float-left {
  &::first-letter {
    float: left;
  }
}
.first-letter\:text-\[\#800000\] {
  &::first-letter {
    color: #800000;
  }
}
.hover\:border-\[\#800000\] {
  &:hover {
    @media (hover: hover) {
      border-color: #800000;
    }
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
  initial-value: rotateX(0);
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
  initial-value: rotateY(0);
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
  initial-value: rotateZ(0);
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
  initial-value: skewX(0);
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
  initial-value: skewY(0);
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
